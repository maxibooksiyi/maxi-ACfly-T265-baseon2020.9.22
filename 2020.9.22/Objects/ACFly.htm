<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ACFly.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ACFly.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Wed Oct 28 17:14:58 2020
<BR><P>
<H3>Maximum Stack Usage =       4128 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message &rArr; addMission(MissionInf, bool, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[16a]">__user_initial_stackheap</a>
 <LI><a href="#[1d7]">__cxa_guard_acquire</a>
 <LI><a href="#[1d8]">__cxa_guard_release</a>
 <LI><a href="#[102]">__cxa_pure_virtual</a>
 <LI><a href="#[351]">abort_message</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[81]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[34b]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34b]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[34c]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34c]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[34d]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34d]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[34e]">std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34e]">std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from drv_sensors.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">DMA2D_IRQHandler</a> from gui.o(.text.DMA2D_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[cc]">Flash_initialize</a> from flash_diskio.o(.text.Flash_initialize) referenced from flash_diskio.o(.rodata.Flash_Driver)
 <LI><a href="#[d0]">Flash_ioctl</a> from flash_diskio.o(.text.Flash_ioctl) referenced from flash_diskio.o(.rodata.Flash_Driver)
 <LI><a href="#[ce]">Flash_read</a> from flash_diskio.o(.text.Flash_read) referenced from flash_diskio.o(.rodata.Flash_Driver)
 <LI><a href="#[cd]">Flash_status</a> from flash_diskio.o(.text.Flash_status) referenced from flash_diskio.o(.rodata.Flash_Driver)
 <LI><a href="#[cf]">Flash_write</a> from flash_diskio.o(.text.Flash_write) referenced from flash_diskio.o(.rodata.Flash_Driver)
 <LI><a href="#[71]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(.text.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from drv_extiic.o(.text.I2C1_ER_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from drv_extiic.o(.text.I2C1_EV_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from drv_usb.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from drv_flash.o(.text.QUADSPI_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from drv_sdmmc.o(.text.SDMMC1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ee]">SD_initialize</a> from sd_diskio.o(.text.SD_initialize) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[f2]">SD_ioctl</a> from sd_diskio.o(.text.SD_ioctl) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[f0]">SD_read</a> from sd_diskio.o(.text.SD_read) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[ef]">SD_status</a> from sd_diskio.o(.text.SD_status) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[f1]">SD_write</a> from sd_diskio.o(.text.SD_write) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[65]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from drv_oled.o(.text.SPI4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM16_IRQHandler</a> from drv_sensors.o(.text.TIM16_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM17_IRQHandler</a> from drv_sensors.o(.text.TIM17_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from drv_rcppm.o(.text.TIM1_CC_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9e]">TIM1_IRQHandlerTCB</a> from drv_rcppm.o(.text.TIM1_IRQHandlerTCB) referenced 2 times from drv_rcppm.o(.text.TIM1_CC_IRQHandler)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from drv_adc.o(.text.TIM4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from timebase.o(.text.TIM5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from drv_ultrasonic.o(.text.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from drv_uart5.o(.text.UART5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from drv_uart7.o(.text.UART7_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART8_IRQHandler</a> from drv_uart8.o(.text.UART8_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from drv_uart1.o(.text.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from drv_rcsbus.o(.text.USART2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a4]">USART2_IRQHandlerTCB</a> from drv_rcsbus.o(.text.USART2_IRQHandlerTCB) referenced 2 times from drv_rcsbus.o(.text.USART2_IRQHandler)
 <LI><a href="#[31]">USART3_IRQHandler</a> from drv_uart3.o(.text.USART3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11e]">_GLOBAL__sub_I_Commulink.cpp</a> from commulink.o(.text._GLOBAL__sub_I_Commulink.cpp) referenced from commulink.o(.init_array)
 <LI><a href="#[111]">_GLOBAL__sub_I_GUI.cpp</a> from gui.o(.text._GLOBAL__sub_I_GUI.cpp) referenced from gui.o(.init_array)
 <LI><a href="#[121]">_GLOBAL__sub_I_MS_Attitude.cpp</a> from ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp) referenced from ms_attitude.o(.init_array)
 <LI><a href="#[122]">_GLOBAL__sub_I_MS_Position.cpp</a> from ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp) referenced from ms_position.o(.init_array)
 <LI><a href="#[112]">_GLOBAL__sub_I_Missions.cpp</a> from missions.o(.text._GLOBAL__sub_I_Missions.cpp) referenced from missions.o(.init_array)
 <LI><a href="#[11f]">_GLOBAL__sub_I_Modes.cpp</a> from modes.o(.text._GLOBAL__sub_I_Modes.cpp) referenced from modes.o(.init_array)
 <LI><a href="#[110]">_GLOBAL__sub_I_Parameters.cpp</a> from parameters.o(.text._GLOBAL__sub_I_Parameters.cpp) referenced from parameters.o(.init_array)
 <LI><a href="#[114]">_GLOBAL__sub_I_Receiver.cpp</a> from receiver.o(.text._GLOBAL__sub_I_Receiver.cpp) referenced from receiver.o(.init_array)
 <LI><a href="#[10f]">_GLOBAL__sub_I_SDStorage.cpp</a> from sdstorage.o(.text._GLOBAL__sub_I_SDStorage.cpp) referenced from sdstorage.o(.init_array)
 <LI><a href="#[113]">_GLOBAL__sub_I_Sensors.cpp</a> from sensors.o(.text._GLOBAL__sub_I_Sensors.cpp) referenced from sensors.o(.init_array)
 <LI><a href="#[120]">_GLOBAL__sub_I_ctrl_Main.cpp</a> from ctrl_main.o(.text._GLOBAL__sub_I_ctrl_Main.cpp) referenced from ctrl_main.o(.init_array)
 <LI><a href="#[11d]">_GLOBAL__sub_I_drv_ADC.cpp</a> from drv_adc.o(.text._GLOBAL__sub_I_drv_ADC.cpp) referenced from drv_adc.o(.init_array)
 <LI><a href="#[11a]">_GLOBAL__sub_I_drv_ExtIIC.cpp</a> from drv_extiic.o(.text._GLOBAL__sub_I_drv_ExtIIC.cpp) referenced from drv_extiic.o(.init_array)
 <LI><a href="#[11b]">_GLOBAL__sub_I_drv_ExtMag.cpp</a> from drv_extmag.o(.text._GLOBAL__sub_I_drv_ExtMag.cpp) referenced from drv_extmag.o(.init_array)
 <LI><a href="#[11c]">_GLOBAL__sub_I_drv_Oled.cpp</a> from drv_oled.o(.text._GLOBAL__sub_I_drv_Oled.cpp) referenced from drv_oled.o(.init_array)
 <LI><a href="#[115]">_GLOBAL__sub_I_drv_Uart1.cpp</a> from drv_uart1.o(.text._GLOBAL__sub_I_drv_Uart1.cpp) referenced from drv_uart1.o(.init_array)
 <LI><a href="#[116]">_GLOBAL__sub_I_drv_Uart3.cpp</a> from drv_uart3.o(.text._GLOBAL__sub_I_drv_Uart3.cpp) referenced from drv_uart3.o(.init_array)
 <LI><a href="#[117]">_GLOBAL__sub_I_drv_Uart5.cpp</a> from drv_uart5.o(.text._GLOBAL__sub_I_drv_Uart5.cpp) referenced from drv_uart5.o(.init_array)
 <LI><a href="#[118]">_GLOBAL__sub_I_drv_Uart7.cpp</a> from drv_uart7.o(.text._GLOBAL__sub_I_drv_Uart7.cpp) referenced from drv_uart7.o(.init_array)
 <LI><a href="#[119]">_GLOBAL__sub_I_drv_Uart8.cpp</a> from drv_uart8.o(.text._GLOBAL__sub_I_drv_Uart8.cpp) referenced from drv_uart8.o(.init_array)
 <LI><a href="#[b9]">Lock_Uart1(double)</a> from drv_uart1.o(.text._Z10Lock_Uart1d) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[bd]">Lock_Uart3(double)</a> from drv_uart3.o(.text._Z10Lock_Uart3d) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[bc]">Read_Uart1(unsigned char*, unsigned short, double, double)</a> from drv_uart1.o(.text._Z10Read_Uart1Phtdd) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[c0]">Read_Uart3(unsigned char*, unsigned short, double, double)</a> from drv_uart3.o(.text._Z10Read_Uart3Phtdd) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[ba]">Write_Uart1(const unsigned char*, unsigned short, double, double)</a> from drv_uart1.o(.text._Z11Write_Uart1PKhtdd) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[be]">Write_Uart3(const unsigned char*, unsigned short, double, double)</a> from drv_uart3.o(.text._Z11Write_Uart3PKhtdd) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[af]">MS_Main_Gyro(void*)</a> from ms_main.o(.text._Z12MS_Main_GyroPv) referenced 2 times from ms_main.o(.text._Z12init_MS_Mainv)
 <LI><a href="#[bb]">Unlock_Uart1()</a> from drv_uart1.o(.text._Z12Unlock_Uart1v) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[bf]">Unlock_Uart3()</a> from drv_uart3.o(.text._Z12Unlock_Uart3v) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[b3]">Lock_USBD_VCOM(double)</a> from drv_usb.o(.text._Z14Lock_USBD_VCOMd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[b5]">Read_USBD_VCOM(unsigned char*, unsigned short, double, double)</a> from drv_usb.o(.text._Z14Read_USBD_VCOMPhtdd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[c8]">DriverInit_task(void*)</a> from main.o(.text._Z15DriverInit_taskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[b2]">Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)</a> from drv_usb.o(.text._Z15Write_USBD_VCOMPKhtdd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[b4]">Unlock_USBD_VCOM()</a> from drv_usb.o(.text._Z16Unlock_USBD_VCOMv) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[b0]">MS_Main(void*)</a> from ms_main.o(.text._Z7MS_MainPv) referenced 2 times from ms_main.o(.text._Z12init_MS_Mainv)
 <LI><a href="#[ac]">_ZL10Debug_taskPv</a> from debug.o(.text._ZL10Debug_taskPv) referenced 2 times from debug.o(.text._Z10init_Debugv)
 <LI><a href="#[b1]">_ZL10GPS_ServerPv</a> from drv_gps.o(.text._ZL10GPS_ServerPv) referenced 2 times from drv_gps.o(.text._Z12init_drv_GPSv)
 <LI><a href="#[c7]">_ZL10GUI_ServerPv</a> from gui.o(.text._ZL10GUI_ServerPv) referenced 2 times from gui.o(.text._Z8init_GUIv)
 <LI><a href="#[ad]">_ZL12MSafe_ServerPv</a> from msafe.o(.text._ZL12MSafe_ServerPv) referenced 2 times from msafe.o(.text._Z10init_MSafev)
 <LI><a href="#[ae]">_ZL12Modes_ServerPv</a> from modes.o(.text._ZL12Modes_ServerPv) referenced 2 times from modes.o(.text._Z10init_Modesv)
 <LI><a href="#[99]">_ZL13BMI088GyroTCBPvj</a> from drv_sensors.o(.text._ZL13BMI088GyroTCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[c1]">_ZL13ExtMag_ServerPv</a> from drv_extmag.o(.text._ZL13ExtMag_ServerPv) referenced 2 times from drv_extmag.o(.text._Z15init_drv_ExtMagv)
 <LI><a href="#[ed]">_ZL13Msg74_VFR_HUDhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL13Msg74_VFR_HUDhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[f5]">_ZL13NavCmd21_LANDdhPdP9NavCmdInf</a> from navcmdprocess.o(.text._ZL13NavCmd21_LANDdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[c2]">_ZL13TFMini_ServerPv</a> from drv_tfmini.o(.text._ZL13TFMini_ServerPv) referenced 2 times from drv_tfmini.o(.text._Z15init_drv_TFMiniv)
 <LI><a href="#[9f]">_ZL13UltrasonicTCBPvj</a> from drv_ultrasonic.o(.text._ZL13UltrasonicTCBPvj) referenced 2 times from drv_ultrasonic.o(.text.TIM8_BRK_TIM12_IRQHandler)
 <LI><a href="#[9a]">_ZL14BMI088AccelTCBPvj</a> from drv_sensors.o(.text._ZL14BMI088AccelTCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[d6]">_ZL14Msg0_HEARTBEAThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL14Msg0_HEARTBEAThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[d7]">_ZL14Msg11_SET_MODEhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL14Msg11_SET_MODEhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[e7]">_ZL14Msg30_ATTITUDEhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL14Msg30_ATTITUDEhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[f7]">_ZL14NavCmd93_DELAYdhPdP9NavCmdInf</a> from navcmdprocess.o(.text._ZL14NavCmd93_DELAYdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[c3]">_ZL15ExtSPL06_ServerPv</a> from drv_extspl06.o(.text._ZL15ExtSPL06_ServerPv) referenced 2 times from drv_extspl06.o(.text._Z17init_drv_ExtSPL06v)
 <LI><a href="#[da]">_ZL15Msg23_PARAM_SEThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL15Msg23_PARAM_SEThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[b6]">_ZL15usb_device_taskPv</a> from drv_usb.o(.text._ZL15usb_device_taskPv) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[b7]">_ZL16Commulink_ServerPv</a> from commulink.o(.text._ZL16Commulink_ServerPv) referenced 2 times from commulink.o(.text._Z14init_Commulinkv)
 <LI><a href="#[e5]">_ZL16Msg01_SYS_STATUShP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL16Msg01_SYS_STATUShP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[f6]">_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf</a> from navcmdprocess.o(.text._ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[e6]">_ZL17Msg24_GPS_RAW_INThP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL17Msg24_GPS_RAW_INThP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[ec]">_ZL17Msg65_RC_CHANNELShP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL17Msg65_RC_CHANNELShP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[f3]">_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf</a> from navcmdprocess.o(.text._ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[c4]">_ZL18ControlSystem_TaskPv</a> from ctrl_main.o(.text._ZL18ControlSystem_TaskPv) referenced 2 times from ctrl_main.o(.text._Z18init_ControlSystemv)
 <LI><a href="#[db]">_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL18Msg39_MISSION_ITEMhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[e4]">_ZL18Msg76_COMMAND_LONGhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL18Msg76_COMMAND_LONGhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[c6]">_ZL18OpticalFlow_ServerPv</a> from drv_opticalflow.o(.text._ZL18OpticalFlow_ServerPv) referenced 2 times from drv_opticalflow.o(.text._Z20init_drv_OpticalFlowv)
 <LI><a href="#[df]">_ZL19Msg44_MISSION_COUNThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL19Msg44_MISSION_COUNThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[d3]">_ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[dc]">_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL21Msg40_MISSION_REQUESThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[d1]">_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[e3]">_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[d2]">_ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[e0]">_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[c5]">_ZL23UltrasonicTimerCallbackPv</a> from drv_ultrasonic.o(.text._ZL23UltrasonicTimerCallbackPv) referenced 2 times from drv_ultrasonic.o(.text._Z19init_drv_ultrasonicv)
 <LI><a href="#[d8]">_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[d9]">_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[e9]">_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[eb]">_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[e8]">_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[ea]">_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[dd]">_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[e1]">_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[e2]">_ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[f4]">_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf</a> from navcmdprocess.o(.text._ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[de]">_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[d4]">_ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[f8]">_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd</a> from inflightcmdprocess.o(.text._ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd) referenced from inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
 <LI><a href="#[d5]">_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[f9]">_ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd</a> from inflightcmdprocess.o(.text._ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd) referenced from inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
 <LI><a href="#[fa]">_ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd</a> from inflightcmdprocess.o(.text._ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd) referenced from inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
 <LI><a href="#[a0]">_ZL5TxTCBPvj</a> from drv_uart5.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart5.o(.text.UART5_IRQHandler)
 <LI><a href="#[a1]">_ZL5TxTCBPvj</a> from drv_uart7.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart7.o(.text.UART7_IRQHandler)
 <LI><a href="#[a2]">_ZL5TxTCBPvj</a> from drv_uart8.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart8.o(.text.UART8_IRQHandler)
 <LI><a href="#[a3]">_ZL5TxTCBPvj</a> from drv_uart1.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart1.o(.text.USART1_IRQHandler)
 <LI><a href="#[a5]">_ZL5TxTCBPvj</a> from drv_uart3.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart3.o(.text.USART3_IRQHandler)
 <LI><a href="#[b8]">_ZL8SDS_TaskPv</a> from sdstorage.o(.text._ZL8SDS_TaskPv) referenced 2 times from sdstorage.o(.text._Z14init_SDStoragev)
 <LI><a href="#[9c]">_ZL8SPL06TCBPvj</a> from drv_sensors.o(.text._ZL8SPL06TCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[9b]">_ZL9AK8975TCBPvj</a> from drv_sensors.o(.text._ZL9AK8975TCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[fb]">M10_RCCalib::main_func(void*, unsigned)</a> from m10_rccalib.o(.text._ZN11M10_RCCalib9main_funcEPvj) referenced from m10_rccalib.o(.rodata._ZTV11M10_RCCalib)
 <LI><a href="#[fc]">M30_AttCtrl::main_func(void*, unsigned)</a> from m30_attctrl.o(.text._ZN11M30_AttCtrl9main_funcEPvj) referenced from m30_attctrl.o(.rodata._ZTV11M30_AttCtrl)
 <LI><a href="#[fd]">M32_PosCtrl::main_func(void*, unsigned)</a> from m32_posctrl.o(.text._ZN11M32_PosCtrl9main_funcEPvj) referenced from m32_posctrl.o(.rodata._ZTV11M32_PosCtrl)
 <LI><a href="#[fe]">M12_AccCalib::main_func(void*, unsigned)</a> from m12_acccalib.o(.text._ZN12M12_AccCalib9main_funcEPvj) referenced from m12_acccalib.o(.rodata._ZTV12M12_AccCalib)
 <LI><a href="#[ff]">M13_MagCalib::main_func(void*, unsigned)</a> from m13_magcalib.o(.text._ZN12M13_MagCalib9main_funcEPvj) referenced from m13_magcalib.o(.rodata._ZTV12M13_MagCalib)
 <LI><a href="#[100]">M11_TempCalib::main_func(void*, unsigned)</a> from m11_tempcalib.o(.text._ZN13M11_TempCalib9main_funcEPvj) referenced from m11_tempcalib.o(.rodata._ZTV13M11_TempCalib)
 <LI><a href="#[101]">M35_Auto1::main_func(void*, unsigned)</a> from m35_auto1.o(.text._ZN9M35_Auto19main_funcEPvj) referenced from m35_auto1.o(.rodata._ZTV9M35_Auto1)
 <LI><a href="#[a8]">RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI10QuaternionED2Ev) referenced 2 times from ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
 <LI><a href="#[a7]">RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI7vector3IdEED2Ev) referenced 2 times from ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
 <LI><a href="#[a7]">RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI7vector3IdEED2Ev) referenced 2 times from ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp)
 <LI><a href="#[ab]">std::__1::map&lang;SName, ReceiverSync, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ReceiverSync&rang;&rang;&rang;::~map__sub_object()</a> from receiver.o(.text._ZNSt3__13mapI5SName12ReceiverSyncNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2Ev) referenced 2 times from receiver.o(.text._GLOBAL__sub_I_Receiver.cpp)
 <LI><a href="#[aa]">std::__1::map&lang;SName, Param, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, Param&rang;&rang;&rang;::~map__sub_object()</a> from parameters.o(.text._ZNSt3__13mapI5SName5ParamNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2Ev) referenced 2 times from parameters.o(.text._GLOBAL__sub_I_Parameters.cpp)
 <LI><a href="#[a9]">std::__1::map&lang;SName, ParamGroup*, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ParamGroup*&rang;&rang;&rang;::~map__sub_object()</a> from parameters.o(.text._ZNSt3__13mapI5SNameP10ParamGroupNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S3_EEEEED2Ev) referenced 2 times from parameters.o(.text._GLOBAL__sub_I_Parameters.cpp)
 <LI><a href="#[102]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from m10_rccalib.o(.rodata._ZTV9Mode_Base)
 <LI><a href="#[a6]">__cxx_global_array_dtor</a> from commulink.o(.text.__cxx_global_array_dtor) referenced 2 times from commulink.o(.text._GLOBAL__sub_I_Commulink.cpp)
 <LI><a href="#[96]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[98]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[97]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[107]">cdcd_control_complete</a> from cdc_device.o(.text.cdcd_control_complete) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[106]">cdcd_control_request</a> from cdc_device.o(.text.cdcd_control_request) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[103]">cdcd_init</a> from cdc_device.o(.text.cdcd_init) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[105]">cdcd_open</a> from cdc_device.o(.text.cdcd_open) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[104]">cdcd_reset</a> from cdc_device.o(.text.cdcd_reset) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[108]">cdcd_xfer_cb</a> from cdc_device.o(.text.cdcd_xfer_cb) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[10d]">mscd_control_complete</a> from msc_device.o(.text.mscd_control_complete) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[10c]">mscd_control_request</a> from msc_device.o(.text.mscd_control_request) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[109]">mscd_init</a> from msc_device.o(.text.mscd_init) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[10b]">mscd_open</a> from msc_device.o(.text.mscd_open) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[10a]">mscd_reset</a> from msc_device.o(.text.mscd_reset) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[10e]">mscd_xfer_cb</a> from msc_device.o(.text.mscd_xfer_cb) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[ca]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[c9]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[cb]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[9d]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from gui.o(.text.DMA2D_IRQHandler)
 <LI><a href="#[9d]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_extiic.o(.text.I2C1_ER_IRQHandler)
 <LI><a href="#[9d]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_extiic.o(.text.I2C1_EV_IRQHandler)
 <LI><a href="#[9d]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_flash.o(.text.QUADSPI_IRQHandler)
 <LI><a href="#[9d]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_oled.o(.text.SPI4_IRQHandler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[96]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[126]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[432]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[433]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[434]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[435]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[436]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[127]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[146]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[129]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[437]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[139]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[12b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[12d]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[438]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[439]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[43a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[43b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[43c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[43d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[43e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[131]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[43f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[440]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[441]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[442]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[133]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[443]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[444]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[445]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[446]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[447]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[448]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[449]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[44a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[44b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[13e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[44c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[44d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[44e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[44f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[450]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[451]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[452]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[125]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[453]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[136]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[138]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[454]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[13a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; init_Basic() &rArr; init_TimeBase() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[455]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[16f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[456]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[13f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[457]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[458]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[156]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[157]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[12a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[144]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[147]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Parameters.cpp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Receiver.cpp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Commulink.cpp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
</UL>

<P><STRONG><a name="[32b]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[340]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[2c4]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_string_cb
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_inquiry_cb
</UL>

<P><STRONG><a name="[2c3]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_stage_xact
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_scsi_cb
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_inquiry_cb
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[149]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[459]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[14b]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[45a]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[45b]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[45c]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreateStatic
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[45d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[152]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[14f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_reset
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_reset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg11_SET_MODEhPK17__mavlink_message
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Main.cpp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
</UL>

<P><STRONG><a name="[45e]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[45f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[460]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[462]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[155]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[143]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[15e]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[142]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[97]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[148]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[464]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[14d]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[466]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[162]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[467]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[468]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[15d]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[160]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[159]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[166]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[135]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[469]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[46a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[164]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[46b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[46c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[46e]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[16c]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[12e]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[16e]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[46f]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[13c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[167]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[42c]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[16b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[470]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[170]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[16d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[172]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[173]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[175]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_driver_sd.o(.text.BSP_SD_GetCardInfo))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_capacity_cb
</UL>

<P><STRONG><a name="[177]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_driver_sd.o(.text.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
</UL>

<P><STRONG><a name="[179]"></a>BSP_SD_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bsp_driver_sd.o(.text.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
</UL>

<P><STRONG><a name="[33d]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, bsp_driver_sd.o(.text.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_write10_cb
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_read10_cb
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_capacity_cb
</UL>

<P><STRONG><a name="[17c]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_driver_sd.o(.text.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[17e]"></a>BSP_SD_ReadCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sd_diskio.o(.text.BSP_SD_ReadCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[180]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_driver_sd.o(.text.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[182]"></a>BSP_SD_WriteCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sd_diskio.o(.text.BSP_SD_WriteCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 698 bytes, Stack size 32 bytes, drv_sensors.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26SPI1_TransmitReceive_StartPKhPht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui.o(.text.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA2D_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[404]"></a>EnterIdleTask</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, cpu_load.o(.text.EnterIdleTask))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[403]"></a>ExitIdleTask</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, cpu_load.o(.text.ExitIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExitIdleTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[285]"></a>FATFS_LinkDriver</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ff_gen_drv.o(.text.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
</UL>

<P><STRONG><a name="[185]"></a>FlashReadSectors</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, drv_flash.o(.text.FlashReadSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FlashReadSectors &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
</UL>

<P><STRONG><a name="[188]"></a>FlashWriteSectors</STRONG> (Thumb, 944 bytes, Stack size 64 bytes, drv_flash.o(.text.FlashWriteSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FlashWriteSectors &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
</UL>

<P><STRONG><a name="[18b]"></a>Get_RTC_Time</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, timebase.o(.text.Get_RTC_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Get_RTC_Time &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14NavCmd93_DELAYdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[3ee]"></a>Get_SD_Init_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdstorage.o(.text.Get_SD_Init_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
</UL>

<P><STRONG><a name="[18e]"></a>HAL_Delay</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, timebase.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_Delay &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
</UL>

<P><STRONG><a name="[260]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_EnableCompensationCell))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 488 bytes, Stack size 36 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspDeInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 410 bytes, Stack size 44 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[19c]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[196]"></a>HAL_GetTick</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, timebase.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[190]"></a>HAL_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[192]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timebase.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[193]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspDeInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[194]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[195]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[25f]"></a>HAL_PWREx_EnableUSBVoltageDetector</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableUSBVoltageDetector))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[25e]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[197]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 3050 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[19a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 578 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_ClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[191]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[19b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1162 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_SDEx_Read_DMADoubleBuf0CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Read_DMADoubleBuf0CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_SDEx_Read_DMADoubleBuf1CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Read_DMADoubleBuf1CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_SDEx_Write_DMADoubleBuf0CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Write_DMADoubleBuf0CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_SDEx_Write_DMADoubleBuf1CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Write_DMADoubleBuf1CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_FindSCR &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_SD_DeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SD_DeInit &rArr; HAL_SD_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspDeInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[176]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[178]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_SD_GetCardStatus</STRONG> (Thumb, 396 bytes, Stack size 112 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_GetCardStatus &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 734 bytes, Stack size 24 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_IRQHandler &rArr; HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuf1CpltCallback
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuf0CpltCallback
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuf1CpltCallback
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuf0CpltCallback
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>HAL_SD_Init</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_SD_InitCard</STRONG> (Thumb, 554 bytes, Stack size 80 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SD_InitCard &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_SD_MspDeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(.text.HAL_SD_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_SD_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DeInit
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_SD_MspInit</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, stm32h7xx_hal_msp.o(.text.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[17d]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[1af]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_driver_sd.o(.text.HAL_SD_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_driver_sd.o(.text.HAL_SD_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_extiic.o(.text.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C1_ER_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, drv_extiic.o(.text.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C1_EV_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1cb]"></a>Lock_SD</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drv_sdmmc.o(.text.Lock_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_capacity_cb
</UL>

<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_usb.o(.text.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = OTG_FS_IRQHandler &rArr; usb_handler &rArr; handle_epin_ints &rArr; dcd_event_xfer_complete &rArr; dcd_event_handler &rArr; osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drv_flash.o(.text.QUADSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QUADSPI_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_sdmmc.o(.text.SDMMC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SDMMC1_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19f]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdAppCommand))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1bb]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdAppOperCommand))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1a7]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdBlockLength))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1a0]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdBusWidth))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1b9]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdGoIdleState))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1ba]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdOperCond))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1c6]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdReadMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[1c7]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[1c1]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSelDesel))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1be]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendCID))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1c0]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendCSD))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1d0]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendSCR))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1a5]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendStatus))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[1bf]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSetRelAdd))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1a9]"></a>SDMMC_CmdStatusRegister</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdStatusRegister))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
</UL>

<P><STRONG><a name="[1ac]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_CmdStopTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[1c8]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[1c9]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[1a8]"></a>SDMMC_ConfigData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1bc]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[19d]"></a>SDMMC_GetResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1a1]"></a>SDMMC_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1a3]"></a>SDMMC_PowerState_OFF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_PowerState_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DeInit
</UL>

<P><STRONG><a name="[1b8]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1aa]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1b0]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>SD_initialize</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sd_diskio.o(.text.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SD_initialize &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[f2]"></a>SD_ioctl</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, sd_diskio.o(.text.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[f0]"></a>SD_read</STRONG> (Thumb, 632 bytes, Stack size 48 bytes, sd_diskio.o(.text.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SD_read &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[ef]"></a>SD_status</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sd_diskio.o(.text.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_status &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[f1]"></a>SD_write</STRONG> (Thumb, 632 bytes, Stack size 48 bytes, sd_diskio.o(.text.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SD_write &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, drv_oled.o(.text.SPI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI4_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[331]"></a>Set_RTC_Time</STRONG> (Thumb, 380 bytes, Stack size 20 bytes, timebase.o(.text.Set_RTC_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Set_RTC_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message
</UL>

<P><STRONG><a name="[3ef]"></a>Set_SD_Init_Complete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdstorage.o(.text.Set_SD_Init_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>SystemInit</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>TIM16_IRQHandler</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, drv_sensors.o(.text.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TIM16_IRQHandler &rArr; __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26SPI1_TransmitReceive_StartPKhPht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, drv_sensors.o(.text.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM17_IRQHandler &rArr; _ZL26SPI1_TransmitReceive_StartPKhPht
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26SPI1_TransmitReceive_StartPKhPht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, drv_rcppm.o(.text.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM1_CC_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>TIM1_IRQHandlerTCB</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, drv_rcppm.o(.text.TIM1_IRQHandlerTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = TIM1_IRQHandlerTCB &rArr; ReceiverUpdate(SName, bool, float*, unsigned char, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rcppm.o(.text.TIM1_CC_IRQHandler)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_adc.o(.text.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timebase.o(.text.TIM5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drv_ultrasonic.o(.text.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, drv_uart5.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART5_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, drv_uart7.o(.text.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART7_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART8_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, drv_uart8.o(.text.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART8_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, drv_uart1.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART1_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, drv_rcsbus.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART2_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>USART2_IRQHandlerTCB</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, drv_rcsbus.o(.text.USART2_IRQHandlerTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = USART2_IRQHandlerTCB &rArr; ReceiverUpdate(SName, bool, float*, unsigned char, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rcsbus.o(.text.USART2_IRQHandler)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, drv_uart3.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART3_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1dc]"></a>USB_DevDisconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(.text.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[22d]"></a>USB_StopDevice</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_StopDevice))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[1d2]"></a>UnLock_SD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_sdmmc.o(.text.UnLock_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UnLock_SD &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_capacity_cb
</UL>

<P><STRONG><a name="[b9]"></a>Lock_Uart1(double)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_uart1.o(.text._Z10Lock_Uart1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Lock_Uart1(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[bd]"></a>Lock_Uart3(double)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_uart3.o(.text._Z10Lock_Uart3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Lock_Uart3(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[337]"></a>MS_get_WGA(unsigned*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z10MS_get_WGAPj))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
</UL>

<P><STRONG><a name="[bc]"></a>Read_Uart1(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, drv_uart1.o(.text._Z10Read_Uart1Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Read_Uart1(unsigned char*, unsigned short, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[c0]"></a>Read_Uart3(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, drv_uart3.o(.text._Z10Read_Uart3Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Read_Uart3(unsigned char*, unsigned short, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[1e5]"></a>Read_Uart5(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, drv_uart5.o(.text._Z10Read_Uart5Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Read_Uart5(unsigned char*, unsigned short, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
</UL>

<P><STRONG><a name="[1e6]"></a>Read_Uart7(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, drv_uart7.o(.text._Z10Read_Uart7Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Read_Uart7(unsigned char*, unsigned short, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
</UL>

<P><STRONG><a name="[1e7]"></a>Read_Uart8(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, drv_uart8.o(.text._Z10Read_Uart8Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Read_Uart8(unsigned char*, unsigned short, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
</UL>

<P><STRONG><a name="[1e8]"></a>SDLog_Txt1(const char*, unsigned short, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sdstorage.o(.text._Z10SDLog_Txt1PKctd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDLog_Txt1(const char*, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[1ea]"></a>SetMsgRate(unsigned char, unsigned short, unsigned short, double)</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, commulink.o(.text._Z10SetMsgRatehttd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SetMsgRate(unsigned char, unsigned short, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_remove&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(Port)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message
</UL>

<P><STRONG><a name="[1ef]"></a>UnlockCtrl()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_main.o(.text._Z10UnlockCtrlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UnlockCtrl() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYZAutoSpeed(double*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYAutoSpeed(double*, double)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_ZAutoSpeed(double*, double*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Altitude_Control_Enabled(bool*, double)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Target_Throttle(double*, double)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_force(double*, double)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ESO_height_T(double*, double)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_b(double*, double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYZAutoSpeed(double)
</UL>

<P><STRONG><a name="[1f0]"></a>addMission(MissionInf, bool, double)</STRONG> (Thumb, 1648 bytes, Stack size 2320 bytes, missions.o(.text._Z10addMission10MissionInfbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 3728 + Unknown Stack Size
<LI>Call Chain = addMission(MissionInf, bool, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
</UL>

<P><STRONG><a name="[1f4]"></a>init_Basic()</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, basic.o(.text._Z10init_Basicv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = init_Basic() &rArr; init_TimeBase() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fa]"></a>init_Debug()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, debug.o(.text._Z10init_Debugv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = init_Debug() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[1fc]"></a>init_MSafe()</STRONG> (Thumb, 268 bytes, Stack size 224 bytes, msafe.o(.text._Z10init_MSafev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = init_MSafe() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[1fd]"></a>init_Modes()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, modes.o(.text._Z10init_Modesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = init_Modes() &rArr; init_AuxFuncs() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::M35_Auto1()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::M11_TempCalib()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::M13_MagCalib()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::M12_AccCalib()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::M32_PosCtrl()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::M30_AttCtrl()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::M10_RCCalib()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[31f]"></a>setLedMode(LEDMode)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, commulink.o(.text._Z10setLedMode7LEDMode))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[28b]"></a>Aux_PWM_Out(double, unsigned char)</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z11Aux_PWM_Outdh))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[206]"></a>MS_Attitude(unsigned char, IMU_Sensor)</STRONG> (Thumb, 13208 bytes, Stack size 656 bytes, ms_attitude.o(.text._Z11MS_Attitudeh10IMU_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = MS_Attitude(unsigned char, IMU_Sensor) &rArr; _ZL18MS_AttitudeHeadingdPP9PosAccInf &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[20f]"></a>MS_Position(unsigned char, IMU_Sensor)</STRONG> (Thumb, 23612 bytes, Stack size 520 bytes, ms_position.o(.text._Z11MS_Positionh10IMU_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = MS_Position(unsigned char, IMU_Sensor) &rArr; PositionSensorSetInavailable(unsigned char, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[214]"></a>ReadMission(unsigned short, MissionInf*, double)</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, missions.o(.text._Z11ReadMissiontP10MissionInfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ReadMission(unsigned short, MissionInf*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[215]"></a>UpdateParam(SName, unsigned long long, double)</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, parameters.o(.text._Z11UpdateParam5SNameyd))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = UpdateParam(SName, unsigned long long, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[ba]"></a>Write_Uart1(const unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, drv_uart1.o(.text._Z11Write_Uart1PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Write_Uart1(const unsigned char*, unsigned short, double, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[be]"></a>Write_Uart3(const unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, drv_uart3.o(.text._Z11Write_Uart3PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Write_Uart3(const unsigned char*, unsigned short, double, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[219]"></a>Write_Uart8(const unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, drv_uart8.o(.text._Z11Write_Uart8PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Write_Uart8(const unsigned char*, unsigned short, double, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
</UL>

<P><STRONG><a name="[21a]"></a>enter_MSafe(bool, double)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z11enter_MSafebd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = enter_MSafe(bool, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[21b]"></a>getReceiver(Receiver*, SName*, double)</STRONG> (Thumb, 1244 bytes, Stack size 88 bytes, receiver.o(.text._Z11getReceiverP8ReceiverP5SNamed))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = getReceiver(Receiver*, SName*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg65_RC_CHANNELShP17__mavlink_message
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_process_AuxFuncs()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[343]"></a>get_maxLean()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z11get_maxLeanv))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[21d]"></a>GetGyroscope(unsigned char, IMU_Sensor*, double)</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, sensors.o(.text._Z12GetGyroscopehP10IMU_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetGyroscope(unsigned char, IMU_Sensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[af]"></a>MS_Main_Gyro(void*)</STRONG> (Thumb, 280 bytes, Stack size 240 bytes, ms_main.o(.text._Z12MS_Main_GyroPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = MS_Main_Gyro(void*) &rArr; MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_main.o(.text._Z12init_MS_Mainv)
</UL>
<P><STRONG><a name="[342]"></a>ModeRegister(Mode_Base*, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, modes.o(.text._Z12ModeRegisterP9Mode_Baseh))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::M35_Auto1()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::M11_TempCalib()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::M13_MagCalib()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::M12_AccCalib()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::M32_PosCtrl()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::M30_AttCtrl()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::M10_RCCalib()
</UL>

<P><STRONG><a name="[bb]"></a>Unlock_Uart1()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_uart1.o(.text._Z12Unlock_Uart1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Unlock_Uart1() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[bf]"></a>Unlock_Uart3()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_uart3.o(.text._Z12Unlock_Uart3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Unlock_Uart3() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[346]"></a>check_NavCmd(unsigned short, double, unsigned char, double*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, navcmdprocess.o(.text._Z12check_NavCmdtdhPd))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[221]"></a>getHomePoint(vector2&lang;double&rang;*, double)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z12getHomePointP7vector2IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getHomePoint(vector2&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[223]"></a>get_Health_Z(PosSensorHealthInf1*, double)</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, ms_position.o(.text._Z12get_Health_ZP19PosSensorHealthInf1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_Health_Z(PosSensorHealthInf1*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[224]"></a>get_Position(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ms_position.o(.text._Z12get_PositionP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_Position(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
</UL>

<P><STRONG><a name="[349]"></a>get_maxAccXY()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z12get_maxAccXYv))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[347]"></a>get_maxVelUp()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z12get_maxVelUpv))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[34a]"></a>get_maxVelXY()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z12get_maxVelXYv))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[225]"></a>init_MS_Main()</STRONG> (Thumb, 228 bytes, Stack size 112 bytes, ms_main.o(.text._Z12init_MS_Mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = init_MS_Main() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[228]"></a>init_Sensors()</STRONG> (Thumb, 1324 bytes, Stack size 1488 bytes, sensors.o(.text._Z12init_Sensorsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896<LI>Call Chain = init_Sensors() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[229]"></a>init_drv_ADC()</STRONG> (Thumb, 648 bytes, Stack size 72 bytes, drv_adc.o(.text._Z12init_drv_ADCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = init_drv_ADC() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[22a]"></a>init_drv_GPS()</STRONG> (Thumb, 144 bytes, Stack size 120 bytes, drv_gps.o(.text._Z12init_drv_GPSv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = init_drv_GPS() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[22b]"></a>init_drv_LED()</STRONG> (Thumb, 540 bytes, Stack size 8 bytes, drv_led.o(.text._Z12init_drv_LEDv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_drv_LED() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[22c]"></a>init_drv_USB()</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, drv_usb.o(.text._Z12init_drv_USBv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = init_drv_USB() &rArr; CommuPortRegister(Port) &rArr; SetMsgRate(unsigned char, unsigned short, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopDevice
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(Port)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[231]"></a>saveMissions(double)</STRONG> (Thumb, 448 bytes, Stack size 80 bytes, missions.o(.text._Z12saveMissionsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = saveMissions(double) &rArr; SaveParamGroup(SName, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
</UL>

<P><STRONG><a name="[233]"></a>update_ESO_1()</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, ctrl_attitude.o(.text._Z12update_ESO_1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = update_ESO_1() &rArr; get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::run(double)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::run(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[32d]"></a>update_ESO_2()</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, ctrl_attitude.o(.text._Z12update_ESO_2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = update_ESO_2()
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[28f]"></a>PWM_PullUpAll()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z13PWM_PullUpAllv))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[238]"></a>ResetRx_Uart8(double)</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, drv_uart8.o(.text._Z13ResetRx_Uart8d))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ResetRx_Uart8(double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
</UL>

<P><STRONG><a name="[23a]"></a>SendMsgToMode(ModeMsg, double)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, modes.o(.text._Z13SendMsgToMode7ModeMsgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg76_COMMAND_LONGhPK17__mavlink_message
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg11_SET_MODEhPK17__mavlink_message
</UL>

<P><STRONG><a name="[23b]"></a>clearMissions(double)</STRONG> (Thumb, 140 bytes, Stack size 112 bytes, missions.o(.text._Z13clearMissionsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = clearMissions(double) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
</UL>

<P><STRONG><a name="[23c]"></a>ctrl_Attitude()</STRONG> (Thumb, 8272 bytes, Stack size 712 bytes, ctrl_attitude.o(.text._Z13ctrl_Attitudev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = ctrl_Attitude() &rArr; _ZL22update_output_throttledd &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryVoltage_filted()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31throttle_nonlinear_compensationPd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[249]"></a>ctrl_Position()</STRONG> (Thumb, 8424 bytes, Stack size 552 bytes, ctrl_position.o(.text._Z13ctrl_Positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = ctrl_Position() &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Target_Throttle(double*, double)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_force(double*, double)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ESO_height_T(double*, double)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_b(double*, double)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_STThrottle()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[25a]"></a>getHomeLatLon(vector2&lang;double&rang;*, double)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z13getHomeLatLonP7vector2IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getHomeLatLon(vector2&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[255]"></a>getHomeLocalZ(double*, double)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z13getHomeLocalZPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getHomeLocalZ(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[25b]"></a>get_Health_XY(PosSensorHealthInf2*, double)</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, ms_position.o(.text._Z13get_Health_XYP19PosSensorHealthInf2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_Health_XY(PosSensorHealthInf2*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[205]"></a>init_AuxFuncs()</STRONG> (Thumb, 308 bytes, Stack size 272 bytes, auxfuncs.o(.text._Z13init_AuxFuncsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = init_AuxFuncs() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[25c]"></a>init_Missions()</STRONG> (Thumb, 696 bytes, Stack size 184 bytes, missions.o(.text._Z13init_Missionsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = init_Missions() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const SName*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[1f6]"></a>init_TimeBase()</STRONG> (Thumb, 810 bytes, Stack size 320 bytes, timebase.o(.text._Z13init_TimeBasev))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = init_TimeBase() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUSBVoltageDetector
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[261]"></a>init_drv_Main()</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, drv_main.o(.text._Z13init_drv_Mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2912 + Unknown Stack Size
<LI>Call Chain = init_drv_Main() &rArr; init_Sensors() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_VDDA_Voltage()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Parameters()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GUI()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtSPL06()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned, double, double)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_TFMini()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtMag()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtIIC()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[267]"></a>init_drv_Oled()</STRONG> (Thumb, 1662 bytes, Stack size 40 bytes, drv_oled.o(.text._Z13init_drv_Oledv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = init_drv_Oled() &rArr; LCD_Clear(unsigned short, double) &rArr; _ZL12LCD_Writ_BusPvjd &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short, double)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[320]"></a>sendLedSignal(LEDSignal)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, commulink.o(.text._Z13sendLedSignal9LEDSignal))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[27d]"></a>sendParamList()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, commulink.o(.text._Z13sendParamListv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sendParamList() &rArr; ResetParametersIterator() &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersIterator()
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
</UL>

<P><STRONG><a name="[b3]"></a>Lock_USBD_VCOM(double)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_usb.o(.text._Z14Lock_USBD_VCOMd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Lock_USBD_VCOM(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[338]"></a>MS_WGA_Correct()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text._Z14MS_WGA_Correctv))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
</UL>

<P><STRONG><a name="[27f]"></a>Matrix_Inverse(double*, unsigned char)</STRONG> (Thumb, 2826 bytes, Stack size 136 bytes, m12_acccalib.o(.text._Z14Matrix_InversePdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Matrix_Inverse(double*, unsigned char) &rArr; operator new[] (unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[281]"></a>ModeReceiveMsg(ModeMsg*, double)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, modes.o(.text._Z14ModeReceiveMsgP7ModeMsgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ModeReceiveMsg(ModeMsg*, double) &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[31c]"></a>Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, navcmdprocess.o(.text._Z14Process_NavCmdtdhPdP9NavCmdInf))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[283]"></a>ReadParamGroup(SName, unsigned long long*, bool*, double)</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, parameters.o(.text._Z14ReadParamGroup5SNamePyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[208]"></a>ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)</STRONG> (Thumb, 600 bytes, Stack size 64 bytes, parameters.o(.text._Z14ReadParamGroup5SNamePyPbttd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[b5]"></a>Read_USBD_VCOM(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, drv_usb.o(.text._Z14Read_USBD_VCOMPhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Read_USBD_VCOM(unsigned char*, unsigned short, double, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[1da]"></a>ReceiverUpdate(SName, bool, float*, unsigned char, double)</STRONG> (Thumb, 1436 bytes, Stack size 192 bytes, receiver.o(.text._Z14ReceiverUpdate5SNamebPfhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ReceiverUpdate(SName, bool, float*, unsigned char, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandlerTCB
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandlerTCB
</UL>

<P><STRONG><a name="[232]"></a>SaveParamGroup(SName, double)</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, parameters.o(.text._Z14SaveParamGroup5SNamed))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = SaveParamGroup(SName, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
</UL>

<P><STRONG><a name="[251]"></a>get_STThrottle()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z14get_STThrottlev))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[348]"></a>get_maxVelDown()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z14get_maxVelDownv))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[254]"></a>get_throttle_b(double*, double)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z14get_throttle_bPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_throttle_b(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[266]"></a>init_Commulink()</STRONG> (Thumb, 208 bytes, Stack size 128 bytes, commulink.o(.text._Z14init_Commulinkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = init_Commulink() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[26b]"></a>init_SDStorage()</STRONG> (Thumb, 344 bytes, Stack size 256 bytes, sdstorage.o(.text._Z14init_SDStoragev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664 + Unknown Stack Size
<LI>Call Chain = init_SDStorage() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[263]"></a>init_drv_Flash()</STRONG> (Thumb, 1708 bytes, Stack size 36 bytes, drv_flash.o(.text._Z14init_drv_Flashv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = init_drv_Flash() &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[274]"></a>init_drv_RCPPM()</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, drv_rcppm.o(.text._Z14init_drv_RCPPMv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = init_drv_RCPPM() &rArr; ReceiverRegister(SName) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[269]"></a>init_drv_SDMMC()</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, drv_sdmmc.o(.text._Z14init_drv_SDMMCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = init_drv_SDMMC() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DeInit
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[26c]"></a>init_drv_Uart1()</STRONG> (Thumb, 728 bytes, Stack size 72 bytes, drv_uart1.o(.text._Z14init_drv_Uart1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_drv_Uart1() &rArr; CommuPortRegister(Port) &rArr; SetMsgRate(unsigned char, unsigned short, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(Port)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[26e]"></a>init_drv_Uart3()</STRONG> (Thumb, 728 bytes, Stack size 72 bytes, drv_uart3.o(.text._Z14init_drv_Uart3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_drv_Uart3() &rArr; CommuPortRegister(Port) &rArr; SetMsgRate(unsigned char, unsigned short, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(Port)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[26f]"></a>init_drv_Uart5()</STRONG> (Thumb, 720 bytes, Stack size 72 bytes, drv_uart5.o(.text._Z14init_drv_Uart5v))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = init_drv_Uart5() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[270]"></a>init_drv_Uart7()</STRONG> (Thumb, 680 bytes, Stack size 72 bytes, drv_uart7.o(.text._Z14init_drv_Uart7v))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = init_drv_Uart7() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[271]"></a>init_drv_Uart8()</STRONG> (Thumb, 720 bytes, Stack size 72 bytes, drv_uart8.o(.text._Z14init_drv_Uart8v))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = init_drv_Uart8() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[31b]"></a>set_BuzzerFreq(unsigned short)</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, drv_led.o(.text._Z14set_BuzzerFreqt))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LEDRefreshf
</UL>

<P><STRONG><a name="[288]"></a>AuxCamTakePhoto()</STRONG> (Thumb, 1232 bytes, Stack size 856 bytes, auxfuncs.o(.text._Z15AuxCamTakePhotov))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = AuxCamTakePhoto() &rArr; get_Attitude_quat(Quaternion*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(const char*, unsigned short, double)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AuxChannelCount()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_PWM_Out(double, unsigned char)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd_CamTakePhoto()
</UL>

<P><STRONG><a name="[c8]"></a>DriverInit_task(void*)</STRONG> (Thumb, 360 bytes, Stack size 120 bytes, main.o(.text._Z15DriverInit_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3032 + Unknown Stack Size
<LI>Call Chain = DriverInit_task(void*) &rArr; init_drv_Main() &rArr; init_Sensors() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInitializationCompleted()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullUpAll()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Debug()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[291]"></a>GetMagnetometer(unsigned char, IMU_Sensor*, double)</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, sensors.o(.text._Z15GetMagnetometerhP10IMU_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetMagnetometer(unsigned char, IMU_Sensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[1ca]"></a>PWM_PullDownAll()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z15PWM_PullDownAllv))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[b2]"></a>Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, drv_usb.o(.text._Z15Write_USBD_VCOMPKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Write_USBD_VCOM(const unsigned char*, unsigned short, double, double) &rArr; tud_cdc_n_write_flush &rArr; usbd_edpt_release &rArr; osal_mutex_lock &rArr; osal_semaphore_wait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_n_write_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[293]"></a>get_VelocityENU(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ms_position.o(.text._Z15get_VelocityENUP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_VelocityENU(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
</UL>

<P><STRONG><a name="[24b]"></a>get_is_inFlight(bool*, double)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z15get_is_inFlightPbd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[344]"></a>get_maxYawSpeed()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z15get_maxYawSpeedv))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[265]"></a>init_Parameters()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, parameters.o(.text._Z15init_Parametersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = init_Parameters() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[275]"></a>init_drv_ExtIIC()</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, drv_extiic.o(.text._Z15init_drv_ExtIICv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_drv_ExtIIC() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[277]"></a>init_drv_ExtMag()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_extmag.o(.text._Z15init_drv_ExtMagv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = init_drv_ExtMag() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[26a]"></a>init_drv_PWMOut()</STRONG> (Thumb, 1592 bytes, Stack size 24 bytes, drv_pwmout.o(.text._Z15init_drv_PWMOutv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = init_drv_PWMOut() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[273]"></a>init_drv_RCSbus()</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, drv_rcsbus.o(.text._Z15init_drv_RCSbusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = init_drv_RCSbus() &rArr; ReceiverRegister(SName) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[27a]"></a>init_drv_TFMini()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, drv_tfmini.o(.text._Z15init_drv_TFMiniv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = init_drv_TFMini() &rArr; PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[31a]"></a>set_BuzzerOnOff(bool)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_led.o(.text._Z15set_BuzzerOnOffb))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LEDRefreshf
</UL>

<P><STRONG><a name="[295]"></a>ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, drv_extiic.o(.text._Z16ExtIIC_SendAddr7hPKhtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
</UL>

<P><STRONG><a name="[296]"></a>GetAccelerometer(unsigned char, IMU_Sensor*, double)</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, sensors.o(.text._Z16GetAccelerometerhP10IMU_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetAccelerometer(unsigned char, IMU_Sensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[262]"></a>Get_VDDA_Voltage()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_adc.o(.text._Z16Get_VDDA_Voltagev))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[297]"></a>LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, drv_oled.o(.text._Z16LCD_WritePicturettttPvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double) &rArr; _ZL12LCD_Writ_BusPvjd &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[286]"></a>ReceiverRegister(SName)</STRONG> (Thumb, 618 bytes, Stack size 384 bytes, receiver.o(.text._Z16ReceiverRegister5SName))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = ReceiverRegister(SName) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockInitializationStatus()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockInitializationStatus()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
</UL>

<P><STRONG><a name="[b4]"></a>Unlock_USBD_VCOM()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_usb.o(.text._Z16Unlock_USBD_VCOMv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Unlock_USBD_VCOM() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[1f3]"></a>UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)</STRONG> (Thumb, 768 bytes, Stack size 96 bytes, parameters.o(.text._Z16UpdateParamGroup5SNamePKyttbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[33c]"></a>getMissionsCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, missions.o(.text._Z16getMissionsCountv))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
</UL>

<P><STRONG><a name="[253]"></a>get_ESO_height_T(double*, double)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z16get_ESO_height_TPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_ESO_height_T(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[226]"></a>init_MS_Attitude()</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, ms_attitude.o(.text._Z16init_MS_Attitudev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_MS_Attitude()
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
</UL>

<P><STRONG><a name="[227]"></a>init_MS_Position()</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, ms_position.o(.text._Z16init_MS_Positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_MS_Position()
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
</UL>

<P><STRONG><a name="[272]"></a>init_drv_Sensors()</STRONG> (Thumb, 6512 bytes, Stack size 128 bytes, drv_sensors.o(.text._Z16init_drv_Sensorsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = init_drv_Sensors() &rArr; IMUAccelerometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IMU_Accelerometer_UpdateFreq(unsigned char, double)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IMU_Gyroscope_UpdateFreq(unsigned char, double)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26SPI1_TransmitReceive_StartPKhPht
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[2a2]"></a>process_AuxFuncs(const Receiver*)</STRONG> (Thumb, 2000 bytes, Stack size 920 bytes, auxfuncs.o(.text._Z16process_AuxFuncsPK8Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = process_AuxFuncs(const Receiver*) &rArr; AuxCamTakePhoto() &rArr; get_Attitude_quat(Quaternion*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(const char*, unsigned short, double)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AuxChannelCount()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_PWM_Out(double, unsigned char)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[31e]"></a>setLedManualCtrl(float, float, float, bool, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, commulink.o(.text._Z16setLedManualCtrlfffbt))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[2a3]"></a>AuxGimbalSetAngle(double)</STRONG> (Thumb, 168 bytes, Stack size 120 bytes, auxfuncs.o(.text._Z17AuxGimbalSetAngled))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = AuxGimbalSetAngle(double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AuxChannelCount()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_PWM_Out(double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd
</UL>

<P><STRONG><a name="[22f]"></a>CommuPortRegister(Port)</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, commulink.o(.text._Z17CommuPortRegister4Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CommuPortRegister(Port) &rArr; SetMsgRate(unsigned char, unsigned short, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_init_chan
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, unsigned short, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[20a]"></a>GetPositionSensor(unsigned char, Position_Sensor*, double)</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, sensors.o(.text._Z17GetPositionSensorhP15Position_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetPositionSensor(unsigned char, Position_Sensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[248]"></a>MainMotor_PWM_Out(double*)</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z17MainMotor_PWM_OutPd))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[26d]"></a>SetBaudRate_Uart1(unsigned, double, double)</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, drv_uart1.o(.text._Z17SetBaudRate_Uart1jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetBaudRate_Uart1(unsigned, double, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[2a5]"></a>SetBaudRate_Uart5(unsigned, double, double)</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, drv_uart5.o(.text._Z17SetBaudRate_Uart5jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetBaudRate_Uart5(unsigned, double, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow()
</UL>

<P><STRONG><a name="[294]"></a>SetBaudRate_Uart7(unsigned, double, double)</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, drv_uart7.o(.text._Z17SetBaudRate_Uart7jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetBaudRate_Uart7(unsigned, double, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_TFMini()
</UL>

<P><STRONG><a name="[2a6]"></a>SetBaudRate_Uart8(unsigned, double, double)</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, drv_uart8.o(.text._Z17SetBaudRate_Uart8jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetBaudRate_Uart8(unsigned, double, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
</UL>

<P><STRONG><a name="[241]"></a>get_Airframe_quat(Quaternion*, double)</STRONG> (Thumb, 648 bytes, Stack size 160 bytes, ms_attitude.o(.text._Z17get_Airframe_quatP10Quaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13UltrasonicTCBPvj
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[211]"></a>get_Attitude_quat(Quaternion*, double)</STRONG> (Thumb, 464 bytes, Stack size 96 bytes, ms_attitude.o(.text._Z17get_Attitude_quatP10Quaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_Attitude_quat(Quaternion*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[24c]"></a>get_Position_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_position.o(.text._Z17get_Position_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_Position_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[2a7]"></a>get_lastZCtrlTime(TIME*, double)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z17get_lastZCtrlTimeP4TIMEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_lastZCtrlTime(TIME*, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[276]"></a>init_drv_ExtSPL06()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_extspl06.o(.text._Z17init_drv_ExtSPL06v))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = init_drv_ExtSPL06() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[33b]"></a>setCurrentMission(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, missions.o(.text._Z17setCurrentMissiont))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[2a8]"></a>set_LedBrightness(float, float, float)</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, drv_led.o(.text._Z17set_LedBrightnessfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = set_LedBrightness(float, float, float) &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LEDRefreshf
</UL>

<P><STRONG><a name="[2aa]"></a>GetParametersCount(unsigned*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, parameters.o(.text._Z18GetParametersCountPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetParametersCount(unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[2ab]"></a>IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)</STRONG> (Thumb, 560 bytes, Stack size 224 bytes, sensors.o(.text._Z18IMUGyroscopeUpdateh7vector3IiEbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13BMI088GyroTCBPvj
</UL>

<P><STRONG><a name="[1f2]"></a>ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)</STRONG> (Thumb, 1400 bytes, Stack size 96 bytes, parameters.o(.text._Z18ParamGroupRegister5SNametjPK14MAV_PARAM_TYPEPKS_PKy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockInitializationStatus()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockInitializationStatus()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator !=(const SName&) const
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
</UL>

<P><STRONG><a name="[25d]"></a>ParamGroupRegister(SName, unsigned short, unsigned, const SName*)</STRONG> (Thumb, 570 bytes, Stack size 112 bytes, parameters.o(.text._Z18ParamGroupRegister5SNametjPKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = ParamGroupRegister(SName, unsigned short, unsigned, const SName*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockInitializationStatus()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockInitializationStatus()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
</UL>

<P><STRONG><a name="[2b2]"></a>ReadCurrentMission(MissionInf*, unsigned short*, double)</STRONG> (Thumb, 376 bytes, Stack size 80 bytes, missions.o(.text._Z18ReadCurrentMissionP10MissionInfPtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ReadCurrentMission(MissionInf*, unsigned short*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[2b3]"></a>get_AirframeY_quat(Quaternion*, double)</STRONG> (Thumb, 808 bytes, Stack size 176 bytes, ms_attitude.o(.text._Z18get_AirframeY_quatP10Quaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[310]"></a>get_CommulinkSysId()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, commulink.o(.text._Z18get_CommulinkSysIdv))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg65_RC_CHANNELShP17__mavlink_message
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
</UL>

<P><STRONG><a name="[2b4]"></a>get_MainBatteryInf(float*, float*, float*, float*, float*)</STRONG> (Thumb, 520 bytes, Stack size 168 bytes, ctrl_main.o(.text._Z18get_MainBatteryInfPfS_S_S_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = get_MainBatteryInf(float*, float*, float*, float*, float*) &rArr; Get_MainBaterry_Voltage() &rArr; ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Voltage()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Current()
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[2b7]"></a>get_OptimalRange_Z(PosSensorHealthInf1*, double)</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, ms_position.o(.text._Z18get_OptimalRange_ZP19PosSensorHealthInf1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_OptimalRange_Z(PosSensorHealthInf1*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
</UL>

<P><STRONG><a name="[252]"></a>get_hover_throttle(double*, double)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z18get_hover_throttlePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_hover_throttle(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[2b8]"></a>get_lastXYCtrlTime(TIME*, double)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z18get_lastXYCtrlTimeP4TIMEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_lastXYCtrlTime(TIME*, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[24e]"></a>get_throttle_force(double*, double)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z18get_throttle_forcePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_throttle_force(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[28d]"></a>init_ControlSystem()</STRONG> (Thumb, 636 bytes, Stack size 464 bytes, ctrl_main.o(.text._Z18init_ControlSystemv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2800 + Unknown Stack Size
<LI>Call Chain = init_ControlSystem() &rArr; init_Ctrl_Position() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[2b9]"></a>init_Ctrl_Attitude()</STRONG> (Thumb, 1244 bytes, Stack size 824 bytes, ctrl_attitude.o(.text._Z18init_Ctrl_Attitudev))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = init_Ctrl_Attitude() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
</UL>

<P><STRONG><a name="[2ba]"></a>init_Ctrl_Position()</STRONG> (Thumb, 1156 bytes, Stack size 928 bytes, ctrl_position.o(.text._Z18init_Ctrl_Positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336<LI>Call Chain = init_Ctrl_Position() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
</UL>

<P><STRONG><a name="[2d1]"></a>set_MainMotorCount(unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z18set_MainMotorCounth))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[345]"></a>Process_InflightCmd(unsigned short, double*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inflightcmdprocess.o(.text._Z19Process_InflightCmdtPd))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[246]"></a>SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, sdstorage.o(.text._Z19SDLog_Msg_DebugVectPKcPdhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDLog_Msg_DebugVect(const char*, double*, unsigned char, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[2bb]"></a>SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)</STRONG> (Thumb, 1776 bytes, Stack size 144 bytes, sdstorage.o(.text._Z19SDLog_Msg_PosSensorh15Position_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
</UL>

<P><STRONG><a name="[28a]"></a>get_AuxChannelCount()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z19get_AuxChannelCountv))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[311]"></a>get_CommulinkCompId()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, commulink.o(.text._Z19get_CommulinkCompIdv))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg65_RC_CHANNELShP17__mavlink_message
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
</UL>

<P><STRONG><a name="[2eb]"></a>get_Current_ZSensor()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z19get_Current_ZSensorv))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
</UL>

<P><STRONG><a name="[2bc]"></a>get_OptimalGlobal_Z(PosSensorHealthInf1*, double)</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, ms_position.o(.text._Z19get_OptimalGlobal_ZP19PosSensorHealthInf1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_OptimalGlobal_Z(PosSensorHealthInf1*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
</UL>

<P><STRONG><a name="[256]"></a>get_Target_Throttle(double*, double)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z19get_Target_ThrottlePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_Target_Throttle(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[258]"></a>get_WindDisturbance(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z19get_WindDisturbanceP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_WindDisturbance(vector3&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[278]"></a>init_drv_ultrasonic()</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, drv_ultrasonic.o(.text._Z19init_drv_ultrasonicv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = init_drv_ultrasonic() &rArr; PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[29f]"></a>IMUGyroscopeRegister(unsigned char, SName, double, double)</STRONG> (Thumb, 736 bytes, Stack size 232 bytes, sensors.o(.text._Z20IMUGyroscopeRegisterh5SNamedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = IMUGyroscopeRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[2c0]"></a>ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, parameters.o(.text._Z20ReadCurrentParameterP5SNamePjP14MAV_PARAM_TYPEPyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[332]"></a>getCurrentMissionInd()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, missions.o(.text._Z20getCurrentMissionIndv))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[234]"></a>get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_attitude.o(.text._Z20get_AngularRate_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_AngularRate_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
</UL>

<P><STRONG><a name="[2ea]"></a>get_Current_XYSensor()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z20get_Current_XYSensorv))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
</UL>

<P><STRONG><a name="[289]"></a>get_OptimalGlobal_XY(PosSensorHealthInf2*, double)</STRONG> (Thumb, 816 bytes, Stack size 56 bytes, ms_position.o(.text._Z20get_OptimalGlobal_XYP19PosSensorHealthInf2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_OptimalGlobal_XY(PosSensorHealthInf2*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[24d]"></a>get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_position.o(.text._Z20get_VelocityENU_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[264]"></a>init_InternalStorage()</STRONG> (Thumb, 290 bytes, Stack size 28 bytes, internalstorage.o(.text._Z20init_InternalStoragev))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = init_InternalStorage() &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_VDDA_Voltage()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[279]"></a>init_drv_OpticalFlow()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, drv_opticalflow.o(.text._Z20init_drv_OpticalFlowv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = init_drv_OpticalFlow() &rArr; PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[2c7]"></a>IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)</STRONG> (Thumb, 560 bytes, Stack size 224 bytes, sensors.o(.text._Z21IMUMagnetometerUpdateh7vector3IiEbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9AK8975TCBPvj
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
</UL>

<P><STRONG><a name="[23e]"></a>MainMotor_PullDownAll()</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z21MainMotor_PullDownAllv))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[2cc]"></a>get_Altitude_MSStatus()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text._Z21get_Altitude_MSStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[210]"></a>get_Attitude_MSStatus()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z21get_Attitude_MSStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[2c8]"></a>get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, ms_position.o(.text._Z21get_OptimalGlobal_XYZP19PosSensorHealthInf3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
</UL>

<P><STRONG><a name="[24f]"></a>get_Position_MSStatus()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text._Z21get_Position_MSStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14NavCmd93_DELAYdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[2c9]"></a>init_process_AuxFuncs()</STRONG> (Thumb, 482 bytes, Stack size 144 bytes, auxfuncs.o(.text._Z21init_process_AuxFuncsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = init_process_AuxFuncs() &rArr; getReceiver(Receiver*, SName*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[2ca]"></a>IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)</STRONG> (Thumb, 592 bytes, Stack size 208 bytes, sensors.o(.text._Z22IMUAccelerometerUpdateh7vector3IiEbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14BMI088AccelTCBPvj
</UL>

<P><STRONG><a name="[284]"></a>PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)</STRONG> (Thumb, 408 bytes, Stack size 72 bytes, sensors.o(.text._Z22PositionSensorRegisterh20Position_Sensor_Type24Position_Sensor_DataType21Position_Sensor_framedddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_TFMini()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
</UL>

<P><STRONG><a name="[2cb]"></a>Altitude_Control_Enable(double)</STRONG> (Thumb, 558 bytes, Stack size 80 bytes, ctrl_position.o(.text._Z23Altitude_Control_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[2ce]"></a>Attitude_Control_Enable(double)</STRONG> (Thumb, 1092 bytes, Stack size 192 bytes, ctrl_attitude.o(.text._Z23Attitude_Control_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_MainMotorCount(unsigned char)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryVoltage_filted()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(double, double, double, double, double)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[2d2]"></a>ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, drv_extiic.o(.text._Z23ExtIIC_SendReceiveAddr7hPKhtS0_td))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
</UL>

<P><STRONG><a name="[2b6]"></a>Get_MainBaterry_Current()</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, drv_adc.o(.text._Z23Get_MainBaterry_Currentv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Get_MainBaterry_Current() &rArr; ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[2b5]"></a>Get_MainBaterry_Voltage()</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, drv_adc.o(.text._Z23Get_MainBaterry_Voltagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Get_MainBaterry_Voltage() &rArr; ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[2a1]"></a>IMUMagnetometerRegister(unsigned char, SName, double, double)</STRONG> (Thumb, 736 bytes, Stack size 232 bytes, sensors.o(.text._Z23IMUMagnetometerRegisterh5SNamedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = IMUMagnetometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
</UL>

<P><STRONG><a name="[2d3]"></a>MS_Notify_IMUGyroUpdate(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ms_main.o(.text._Z23MS_Notify_IMUGyroUpdateh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS_Notify_IMUGyroUpdate(unsigned char) &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13BMI088GyroTCBPvj
</UL>

<P><STRONG><a name="[2d5]"></a>PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)</STRONG> (Thumb, 792 bytes, Stack size 288 bytes, sensors.o(.text._Z23PositionSensorUpdateVelh7vector3IdEbdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
</UL>

<P><STRONG><a name="[2d6]"></a>Position_Control_Enable(double)</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, ctrl_position.o(.text._Z23Position_Control_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Position_Control_Enable(double) &rArr; Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYZAutoSpeed(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[27e]"></a>ResetParametersIterator()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, parameters.o(.text._Z23ResetParametersIteratorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ResetParametersIterator() &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendParamList()
</UL>

<P><STRONG><a name="[2d8]"></a>Altitude_Control_Disable(double)</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z24Altitude_Control_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Altitude_Control_Disable(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
</UL>

<P><STRONG><a name="[2d9]"></a>Attitude_Control_Disable(double)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z24Attitude_Control_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Attitude_Control_Disable(double) &rArr; Altitude_Control_Disable(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[29e]"></a>IMUAccelerometerRegister(unsigned char, SName, double, double)</STRONG> (Thumb, 736 bytes, Stack size 232 bytes, sensors.o(.text._Z24IMUAccelerometerRegisterh5SNamedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = IMUAccelerometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[2db]"></a>InflightCmd_CamTakePhoto()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inflightcmdprocess.o(.text._Z24InflightCmd_CamTakePhotov))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = InflightCmd_CamTakePhoto() &rArr; AuxCamTakePhoto() &rArr; get_Attitude_quat(Quaternion*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[2ae]"></a>InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double)</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, internalstorage.o(.text._Z24InternalStorage_ReadFilePKcS0_PvPjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
</UL>

<P><STRONG><a name="[218]"></a>InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, internalstorage.o(.text._Z24InternalStorage_SaveFilePKcS0_PKvjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
</UL>

<P><STRONG><a name="[298]"></a>LockInitializationStatus()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, basic.o(.text._Z24LockInitializationStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[220]"></a>MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)</STRONG> (Thumb, 1366 bytes, Stack size 64 bytes, ms_attitude.o(.text._Z24MS_Attitude_GyroIntegralh10IMU_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
</UL>

<P><STRONG><a name="[2e0]"></a>MS_Notify_IMUAceelUpdate(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ms_main.o(.text._Z24MS_Notify_IMUAceelUpdateh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS_Notify_IMUAceelUpdate(unsigned char) &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14BMI088AccelTCBPvj
</UL>

<P><STRONG><a name="[2e1]"></a>PositionSensorUnRegister(unsigned char, double)</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sensors.o(.text._Z24PositionSensorUnRegisterhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PositionSensorUnRegister(unsigned char, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
</UL>

<P><STRONG><a name="[2da]"></a>Position_Control_Disable(double)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z24Position_Control_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Position_Control_Disable(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[236]"></a>get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_position.o(.text._Z24get_AccelerationENU_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[2e2]"></a>get_Altitude_ControlMode(Position_ControlMode*, double)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z24get_Altitude_ControlModeP20Position_ControlModed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_Altitude_ControlMode(Position_ControlMode*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[2e3]"></a>get_AngularRateNC_filted(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z24get_AngularRateNC_filtedP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_AngularRateNC_filted(vector3&lang;double&rang;*, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[2e4]"></a>get_Position_ControlMode(Position_ControlMode*, double)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z24get_Position_ControlModeP20Position_ControlModed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_Position_ControlMode(Position_ControlMode*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[213]"></a>get_history_AttitudeQuat(Quaternion*, double, double)</STRONG> (Thumb, 536 bytes, Stack size 96 bytes, ms_attitude.o(.text._Z24get_history_AttitudeQuatP10Quaterniondd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_history_AttitudeQuat(Quaternion*, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[2e5]"></a>IMUMagnetometerUnRegister(unsigned char, double)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sensors.o(.text._Z25IMUMagnetometerUnRegisterhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IMUMagnetometerUnRegister(unsigned char, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
</UL>

<P><STRONG><a name="[2e6]"></a>ParameterIteratorMoveNext()</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, parameters.o(.text._Z25ParameterIteratorMoveNextv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ParameterIteratorMoveNext() &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[330]"></a>getUploadingMissionsCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, missions.o(.text._Z25getUploadingMissionsCountv))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
</UL>

<P><STRONG><a name="[2e7]"></a>get_AccelerationNC_filted(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z25get_AccelerationNC_filtedP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_AccelerationNC_filted(vector3&lang;double&rang;*, double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[2e8]"></a>Position_Control_set_ZLock(double)</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, ctrl_position.o(.text._Z26Position_Control_set_ZLockd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Position_Control_set_ZLock(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14NavCmd93_DELAYdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[2e9]"></a>SDLog_Msg_LocalPositionNed(double)</STRONG> (Thumb, 504 bytes, Stack size 200 bytes, sdstorage.o(.text._Z26SDLog_Msg_LocalPositionNedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SDLog_Msg_LocalPositionNed(double) &rArr; get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Current_XYSensor()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Current_ZSensor()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU(vector3&lang;double&rang;*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[299]"></a>UnLockInitializationStatus()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, basic.o(.text._Z26UnLockInitializationStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[216]"></a>getInitializationCompleted()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, basic.o(.text._Z26getInitializationCompletedv))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterIteratorMoveNext()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersIterator()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[28e]"></a>setInitializationCompleted()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, basic.o(.text._Z26setInitializationCompletedv))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[2ad]"></a>InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)</STRONG> (Thumb, 208 bytes, Stack size 840 bytes, internalstorage.o(.text._Z27InternalStorage_GetFileSizePKcS0_Pjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
</UL>

<P><STRONG><a name="[2ec]"></a>Position_Control_set_XYLock(double)</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, ctrl_position.o(.text._Z27Position_Control_set_XYLockd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_set_XYLock(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14NavCmd93_DELAYdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[2ed]"></a>is_Altitude_Control_Enabled(bool*, double)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ctrl_position.o(.text._Z27is_Altitude_Control_EnabledPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = is_Altitude_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
</UL>

<P><STRONG><a name="[24a]"></a>is_Attitude_Control_Enabled(bool*, double)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z27is_Attitude_Control_EnabledPbd))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[2ee]"></a>is_Position_Control_Enabled(bool*, double)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ctrl_position.o(.text._Z27is_Position_Control_EnabledPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = is_Position_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[2ef]"></a>Attitude_Control_set_YawLock(double)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z28Attitude_Control_set_YawLockd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Attitude_Control_set_YawLock(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[2f0]"></a>PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sensors.o(.text._Z28PositionSensorChangeDataTypeh24Position_Sensor_DataTyped))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
</UL>

<P><STRONG><a name="[212]"></a>PositionSensorSetInavailable(unsigned char, double)</STRONG> (Thumb, 528 bytes, Stack size 232 bytes, sensors.o(.text._Z28PositionSensorSetInavailablehd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = PositionSensorSetInavailable(unsigned char, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13UltrasonicTCBPvj
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[2f1]"></a>PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)</STRONG> (Thumb, 792 bytes, Stack size 288 bytes, sensors.o(.text._Z28PositionSensorUpdatePositionh7vector3IdEbdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13UltrasonicTCBPvj
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[2f2]"></a>SDLog_Msg_AttitudeQuaternion(double)</STRONG> (Thumb, 368 bytes, Stack size 144 bytes, sdstorage.o(.text._Z28SDLog_Msg_AttitudeQuaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SDLog_Msg_AttitudeQuaternion(double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[32f]"></a>get_current_use_IMUGyroscope()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z28get_current_use_IMUGyroscopev))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[2a0]"></a>set_IMU_Gyroscope_UpdateFreq(unsigned char, double)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ms_main.o(.text._Z28set_IMU_Gyroscope_UpdateFreqhd))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[257]"></a>Attitude_Control_set_Throttle(double, double)</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z29Attitude_Control_set_Throttledd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Attitude_Control_set_Throttle(double, double) &rArr; is_Altitude_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Altitude_Control_Enabled(bool*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[23f]"></a>get_MainBatteryVoltage_filted()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_main.o(.text._Z29get_MainBatteryVoltage_filtedv))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[2f3]"></a>Attitude_Control_set_Target_Yaw(double, double)</STRONG> (Thumb, 496 bytes, Stack size 104 bytes, ctrl_attitude.o(.text._Z31Attitude_Control_set_Target_Yawdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Attitude_Control_set_Target_Yaw(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[2f4]"></a>Position_Control_Takeoff_Height(double, double)</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, ctrl_position.o(.text._Z31Position_Control_Takeoff_Heightdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Position_Control_Takeoff_Height(double, double) &rArr; Position_Control_Takeoff_HeightRelative(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[2f6]"></a>Position_Control_get_ZAutoSpeed(double*, double*, double)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z31Position_Control_get_ZAutoSpeedPdS_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Position_Control_get_ZAutoSpeed(double*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[2cf]"></a>Position_Control_set_ZAutoSpeed(double, double, double)</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, ctrl_position.o(.text._Z31Position_Control_set_ZAutoSpeedddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Position_Control_set_ZAutoSpeed(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[2f7]"></a>Position_Control_get_XYAutoSpeed(double*, double)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ctrl_position.o(.text._Z32Position_Control_get_XYAutoSpeedPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_get_XYAutoSpeed(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[2f8]"></a>Position_Control_set_XYAutoSpeed(double, double)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z32Position_Control_set_XYAutoSpeeddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Position_Control_set_XYAutoSpeed(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[32e]"></a>get_current_use_IMUAccelerometer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z32get_current_use_IMUAccelerometerv))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[29d]"></a>set_IMU_Accelerometer_UpdateFreq(unsigned char, double)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ms_main.o(.text._Z32set_IMU_Accelerometer_UpdateFreqhd))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[2f9]"></a>Position_Control_get_XYZAutoSpeed(double*, double)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ctrl_position.o(.text._Z33Position_Control_get_XYZAutoSpeedPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_get_XYZAutoSpeed(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[2fa]"></a>Position_Control_set_XYZAutoSpeed(double, double)</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, ctrl_position.o(.text._Z33Position_Control_set_XYZAutoSpeeddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Position_Control_set_XYZAutoSpeed(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[2fb]"></a>Attitude_Control_set_Target_YawRate(double, double)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z35Attitude_Control_set_Target_YawRatedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Attitude_Control_set_Target_YawRate(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[2d7]"></a>Position_Control_reset_XYZAutoSpeed(double)</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, ctrl_position.o(.text._Z35Position_Control_reset_XYZAutoSpeedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Position_Control_reset_XYZAutoSpeed(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
</UL>

<P><STRONG><a name="[2fc]"></a>Position_Control_set_TargetPositionZ(double, double, double)</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, ctrl_position.o(.text._Z36Position_Control_set_TargetPositionZddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
</UL>

<P><STRONG><a name="[2fd]"></a>Position_Control_set_TargetVelocityZ(double, double)</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z36Position_Control_set_TargetVelocityZdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Position_Control_set_TargetVelocityZ(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[259]"></a>Attitude_Control_get_Target_RollPitch(double*, double*, double)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z37Attitude_Control_get_Target_RollPitchPdS_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Attitude_Control_get_Target_RollPitch(double*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[250]"></a>Attitude_Control_set_Target_RollPitch(double, double, double)</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, ctrl_attitude.o(.text._Z37Attitude_Control_set_Target_RollPitchddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Attitude_Control_set_Target_RollPitch(double, double, double) &rArr; is_Position_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[2fe]"></a>PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double)</STRONG> (Thumb, 1680 bytes, Stack size 312 bytes, sensors.o(.text._Z37PositionSensorUpdatePositionGlobalVelh7vector3IdES0_bdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
</UL>

<P><STRONG><a name="[2ff]"></a>Position_Control_Takeoff_HeightGlobal(double, double)</STRONG> (Thumb, 82 bytes, Stack size 112 bytes, ctrl_position.o(.text._Z37Position_Control_Takeoff_HeightGlobaldd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Position_Control_Takeoff_HeightGlobal(double, double) &rArr; Position_Control_Takeoff_HeightRelative(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[300]"></a>Position_Control_set_TargetPositionXY(double, double, double, double)</STRONG> (Thumb, 608 bytes, Stack size 72 bytes, ctrl_position.o(.text._Z37Position_Control_set_TargetPositionXYdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Position_Control_set_TargetPositionXY(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[301]"></a>Position_Control_set_TargetPositionXYZ(double, double, double, double, double)</STRONG> (Thumb, 928 bytes, Stack size 80 bytes, ctrl_position.o(.text._Z38Position_Control_set_TargetPositionXYZddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Position_Control_set_TargetPositionXYZ(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[302]"></a>Position_Control_set_TargetPositionZRA(double, double, double)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, ctrl_position.o(.text._Z38Position_Control_set_TargetPositionZRAddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Position_Control_set_TargetPositionZRA(double, double, double) &rArr; Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[2f5]"></a>Position_Control_Takeoff_HeightRelative(double, double)</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, ctrl_position.o(.text._Z39Position_Control_Takeoff_HeightRelativedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Position_Control_Takeoff_HeightRelative(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[303]"></a>Position_Control_get_LineFlightDistance(double*, double)</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, ctrl_position.o(.text._Z39Position_Control_get_LineFlightDistancePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Position_Control_get_LineFlightDistance(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[304]"></a>Position_Control_set_TargetPositionZGlobal(double, double, double)</STRONG> (Thumb, 120 bytes, Stack size 120 bytes, ctrl_position.o(.text._Z42Position_Control_set_TargetPositionZGlobalddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Position_Control_set_TargetPositionZGlobal(double, double, double) &rArr; Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[305]"></a>Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)</STRONG> (Thumb, 672 bytes, Stack size 216 bytes, ctrl_position.o(.text._Z44Position_Control_set_TargetPositionXY_LatLondddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Position_Control_set_TargetPositionXY_LatLon(double, double, double, double) &rArr; Position_Control_set_TargetPositionXY(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[306]"></a>Position_Control_set_TargetPositionXYRelative(double, double, double, double)</STRONG> (Thumb, 600 bytes, Stack size 64 bytes, ctrl_position.o(.text._Z45Position_Control_set_TargetPositionXYRelativedddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Position_Control_set_TargetPositionXYRelative(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[307]"></a>Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)</STRONG> (Thumb, 712 bytes, Stack size 272 bytes, ctrl_position.o(.text._Z45Position_Control_set_TargetPositionXYZ_LatLonddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double) &rArr; Position_Control_set_TargetPositionXYZ(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[308]"></a>Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)</STRONG> (Thumb, 904 bytes, Stack size 88 bytes, ctrl_position.o(.text._Z46Position_Control_set_TargetPositionXYZRelativeddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[309]"></a>Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)</STRONG> (Thumb, 736 bytes, Stack size 232 bytes, ctrl_position.o(.text._Z47Position_Control_set_TargetPositionXYZRA_LatLonddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double) &rArr; Position_Control_set_TargetPositionXYZ(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[30a]"></a>Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)</STRONG> (Thumb, 384 bytes, Stack size 128 bytes, ctrl_position.o(.text._Z56Position_Control_set_TargetPositionXYRelativeBodyheadingdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double) &rArr; get_Attitude_quat(Quaternion*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[30b]"></a>Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)</STRONG> (Thumb, 384 bytes, Stack size 136 bytes, ctrl_position.o(.text._Z57Position_Control_set_TargetPositionXYZRelativeBodyheadingddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double) &rArr; Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[30c]"></a>Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)</STRONG> (Thumb, 984 bytes, Stack size 128 bytes, ctrl_position.o(.text._Z59Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimitddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[b0]"></a>MS_Main(void*)</STRONG> (Thumb, 612 bytes, Stack size 296 bytes, ms_main.o(.text._Z7MS_MainPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = MS_Main(void*) &rArr; MS_Attitude(unsigned char, IMU_Sensor) &rArr; _ZL18MS_AttitudeHeadingdPP9PosAccInf &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_main.o(.text._Z12init_MS_Mainv)
</UL>
<P><STRONG><a name="[222]"></a>LockCtrl(double)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ctrl_main.o(.text._Z8LockCtrld))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYZAutoSpeed(double*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYAutoSpeed(double*, double)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_ZAutoSpeed(double*, double*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Altitude_Control_Enabled(bool*, double)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Target_Throttle(double*, double)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_force(double*, double)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ESO_height_T(double*, double)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_b(double*, double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYZAutoSpeed(double)
</UL>

<P><STRONG><a name="[30e]"></a>get_Port(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, commulink.o(.text._Z8get_Porth))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[268]"></a>init_GUI()</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, gui.o(.text._Z8init_GUIv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = init_GUI() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[27c]"></a>LCD_Clear(unsigned short, double)</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, drv_oled.o(.text._Z9LCD_Cleartd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LCD_Clear(unsigned short, double) &rArr; _ZL12LCD_Writ_BusPvjd &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
</UL>

<P><STRONG><a name="[240]"></a>ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, parameters.o(.text._Z9ReadParam5SNamePjP14MAV_PARAM_TYPEPyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Voltage()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Current()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[30d]"></a>ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, parameters.o(.text._Z9ReadParamjP5SNameP14MAV_PARAM_TYPEPyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
</UL>

<P><STRONG><a name="[20e]"></a>Quaternion::rotate_delta_angle(vector3&lang;double&rang;)</STRONG> (Thumb, 536 bytes, Stack size 80 bytes, ms_attitude.o(.text._ZN10Quaternion18rotate_delta_angleE7vector3IdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Quaternion::rotate_delta_angle(vector3&lang;double&rang;) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[fb]"></a>M10_RCCalib::main_func(void*, unsigned)</STRONG> (Thumb, 6048 bytes, Stack size 768 bytes, m10_rccalib.o(.text._ZN11M10_RCCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = M10_RCCalib::main_func(void*, unsigned) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m10_rccalib.o(.rodata._ZTV11M10_RCCalib)
</UL>
<P><STRONG><a name="[1fe]"></a>M10_RCCalib::M10_RCCalib()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m10_rccalib.o(.text._ZN11M10_RCCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M10_RCCalib::M10_RCCalib() &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[471]"></a>M10_RCCalib::M10_RCCalib__sub_object()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m10_rccalib.o(.text._ZN11M10_RCCalibC2Ev), UNUSED)

<P><STRONG><a name="[fc]"></a>M30_AttCtrl::main_func(void*, unsigned)</STRONG> (Thumb, 580 bytes, Stack size 232 bytes, m30_attctrl.o(.text._ZN11M30_AttCtrl9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = M30_AttCtrl::main_func(void*, unsigned) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxYawSpeed()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxLean()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m30_attctrl.o(.rodata._ZTV11M30_AttCtrl)
</UL>
<P><STRONG><a name="[202]"></a>M30_AttCtrl::M30_AttCtrl()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m30_attctrl.o(.text._ZN11M30_AttCtrlC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M30_AttCtrl::M30_AttCtrl() &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[472]"></a>M30_AttCtrl::M30_AttCtrl__sub_object()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m30_attctrl.o(.text._ZN11M30_AttCtrlC2Ev), UNUSED)

<P><STRONG><a name="[fd]"></a>M32_PosCtrl::main_func(void*, unsigned)</STRONG> (Thumb, 3488 bytes, Stack size 736 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrl9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2720 + Unknown Stack Size
<LI>Call Chain = M32_PosCtrl::main_func(void*, unsigned) &rArr; process_AuxFuncs(const Receiver*) &rArr; AuxCamTakePhoto() &rArr; get_Attitude_quat(Quaternion*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMission(unsigned short)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_process_AuxFuncs()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxYawSpeed()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxLean()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd_CamTakePhoto()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_InflightCmd(unsigned short, double*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelDown()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelXY()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelUp()
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxAccXY()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_NavCmd(unsigned short, double, unsigned char, double*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m32_posctrl.o(.rodata._ZTV11M32_PosCtrl)
</UL>
<P><STRONG><a name="[203]"></a>M32_PosCtrl::M32_PosCtrl()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrlC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M32_PosCtrl::M32_PosCtrl() &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[473]"></a>M32_PosCtrl::M32_PosCtrl__sub_object()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrlC2Ev), UNUSED)

<P><STRONG><a name="[fe]"></a>M12_AccCalib::main_func(void*, unsigned)</STRONG> (Thumb, 5304 bytes, Stack size 1536 bytes, m12_acccalib.o(.text._ZN12M12_AccCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = M12_AccCalib::main_func(void*, unsigned) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m12_acccalib.o(.rodata._ZTV12M12_AccCalib)
</UL>
<P><STRONG><a name="[200]"></a>M12_AccCalib::M12_AccCalib()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m12_acccalib.o(.text._ZN12M12_AccCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M12_AccCalib::M12_AccCalib() &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[474]"></a>M12_AccCalib::M12_AccCalib__sub_object()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m12_acccalib.o(.text._ZN12M12_AccCalibC2Ev), UNUSED)

<P><STRONG><a name="[ff]"></a>M13_MagCalib::main_func(void*, unsigned)</STRONG> (Thumb, 4984 bytes, Stack size 1696 bytes, m13_magcalib.o(.text._ZN12M13_MagCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488<LI>Call Chain = M13_MagCalib::main_func(void*, unsigned) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m13_magcalib.o(.rodata._ZTV12M13_MagCalib)
</UL>
<P><STRONG><a name="[201]"></a>M13_MagCalib::M13_MagCalib()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m13_magcalib.o(.text._ZN12M13_MagCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M13_MagCalib::M13_MagCalib() &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[475]"></a>M13_MagCalib::M13_MagCalib__sub_object()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m13_magcalib.o(.text._ZN12M13_MagCalibC2Ev), UNUSED)

<P><STRONG><a name="[100]"></a>M11_TempCalib::main_func(void*, unsigned)</STRONG> (Thumb, 2752 bytes, Stack size 744 bytes, m11_tempcalib.o(.text._ZN13M11_TempCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = M11_TempCalib::main_func(void*, unsigned) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m11_tempcalib.o(.rodata._ZTV13M11_TempCalib)
</UL>
<P><STRONG><a name="[1ff]"></a>M11_TempCalib::M11_TempCalib()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m11_tempcalib.o(.text._ZN13M11_TempCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M11_TempCalib::M11_TempCalib() &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[476]"></a>M11_TempCalib::M11_TempCalib__sub_object()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m11_tempcalib.o(.text._ZN13M11_TempCalibC2Ev), UNUSED)

<P><STRONG><a name="[235]"></a>ESO_AngularRate::run(double)</STRONG> (Thumb, 708 bytes, Stack size 104 bytes, ms_attitude.o(.text._ZN15ESO_AngularRate3runEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ESO_AngularRate::run(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
</UL>

<P><STRONG><a name="[2d0]"></a>ESO_AngularRate::init(double, double, double, double, double)</STRONG> (Thumb, 672 bytes, Stack size 64 bytes, ctrl_attitude.o(.text._ZN15ESO_AngularRate4initEddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ESO_AngularRate::init(double, double, double, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[237]"></a>ESO_h::run(double)</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, ms_attitude.o(.text._ZN5ESO_h3runEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ESO_h::run(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
</UL>

<P><STRONG><a name="[1d9]"></a>SName::SName__sub_object(const char*)</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, main.o(.text._ZN5SNameC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandlerTCB
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandlerTCB
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ExtMag.cpp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Voltage()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Current()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::M35_Auto1()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::M11_TempCalib()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::M13_MagCalib()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::M12_AccCalib()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::M32_PosCtrl()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::M30_AttCtrl()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::M10_RCCalib()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[2ac]"></a>SName::operator +(const SName&)</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, sensors.o(.text._ZN5SNameplERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SName::operator +(const SName&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
</UL>

<P><STRONG><a name="[245]"></a>TD4_SL::track4(double, double)</STRONG> (Thumb, 534 bytes, Stack size 88 bytes, ctrl_attitude.o(.text._ZN6TD4_SL6track4Edd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TD4_SL::track4(double, double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[242]"></a>TD3_2DSL::track3(vector2&lang;double&rang;, double)</STRONG> (Thumb, 1208 bytes, Stack size 144 bytes, ctrl_attitude.o(.text._ZN8TD3_2DSL6track3E7vector2IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TD3_2DSL::track3(vector2&lang;double&rang;, double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[101]"></a>M35_Auto1::main_func(void*, unsigned)</STRONG> (Thumb, 2788 bytes, Stack size 552 bytes, m35_auto1.o(.text._ZN9M35_Auto19main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = M35_Auto1::main_func(void*, unsigned) &rArr; Position_Control_Enable(double) &rArr; Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxYawSpeed()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxLean()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelDown()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelXY()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelUp()
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxAccXY()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nan
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m35_auto1.o(.rodata._ZTV9M35_Auto1)
</UL>
<P><STRONG><a name="[204]"></a>M35_Auto1::M35_Auto1()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m35_auto1.o(.text._ZN9M35_Auto1C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M35_Auto1::M35_Auto1() &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[477]"></a>M35_Auto1::M35_Auto1__sub_object()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m35_auto1.o(.text._ZN9M35_Auto1C2Ev), UNUSED)

<P><STRONG><a name="[a8]"></a>RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ms_attitude.o(.text._ZN9RingQueueI10QuaternionED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object() &rArr; operator delete[] (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
</UL>
<P><STRONG><a name="[a7]"></a>RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ms_attitude.o(.text._ZN9RingQueueI7vector3IdEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object() &rArr; operator delete[] (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
<LI> ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp)
</UL>
<P><STRONG><a name="[217]"></a>SName::operator &lang;(const SName&) const</STRONG> (Thumb, 412 bytes, Stack size 0 bytes, parameters.o(.text._ZNK5SNameltERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
</UL>

<P><STRONG><a name="[2af]"></a>SName::operator !=(const SName&) const</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, parameters.o(.text._ZNK5SNameneERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
</UL>

<P><STRONG><a name="[1ed]"></a>void std::__1::__tree_remove&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)</STRONG> (Thumb, 654 bytes, Stack size 16 bytes, commulink.o(.text._ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void std::__1::__tree_remove&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, unsigned short, double)
</UL>

<P><STRONG><a name="[1ec]"></a>void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, parameters.o(.text._ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, unsigned short, double)
</UL>

<P><STRONG><a name="[ab]"></a>std::__1::map&lang;SName, ReceiverSync, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ReceiverSync&rang;&rang;&rang;::~map__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, receiver.o(.text._ZNSt3__13mapI5SName12ReceiverSyncNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__1::map&lang;SName, ReceiverSync, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ReceiverSync&rang;&rang;&rang;::~map__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> receiver.o(.text._GLOBAL__sub_I_Receiver.cpp)
</UL>
<P><STRONG><a name="[aa]"></a>std::__1::map&lang;SName, Param, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, Param&rang;&rang;&rang;::~map__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, parameters.o(.text._ZNSt3__13mapI5SName5ParamNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__1::map&lang;SName, Param, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, Param&rang;&rang;&rang;::~map__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.text._GLOBAL__sub_I_Parameters.cpp)
</UL>
<P><STRONG><a name="[a9]"></a>std::__1::map&lang;SName, ParamGroup*, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ParamGroup*&rang;&rang;&rang;::~map__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, parameters.o(.text._ZNSt3__13mapI5SNameP10ParamGroupNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S3_EEEEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__1::map&lang;SName, ParamGroup*, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ParamGroup*&rang;&rang;&rang;::~map__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.text._GLOBAL__sub_I_Parameters.cpp)
</UL>
<P><STRONG><a name="[29b]"></a>std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_S3_EEEEENSD_INS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...) &rArr; operator new(unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[34b]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::map&lang;SName, ReceiverSync, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ReceiverSync&rang;&rang;&rang;::~map__sub_object()
</UL>

<P><STRONG><a name="[2b1]"></a>std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_S3_EEEEENSD_INS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...) &rArr; operator new(unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
</UL>

<P><STRONG><a name="[34c]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::map&lang;SName, Param, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, Param&rang;&rang;&rang;::~map__sub_object()
</UL>

<P><STRONG><a name="[2b0]"></a>std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_S4_EEEEENSE_INS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...) &rArr; operator new(unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
</UL>

<P><STRONG><a name="[34d]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::map&lang;SName, ParamGroup*, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ParamGroup*&rang;&rang;&rang;::~map__sub_object()
</UL>

<P><STRONG><a name="[34e]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_array_dtor
</UL>

<P><STRONG><a name="[280]"></a>operator delete[] (void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, basic.o(.text._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator delete[] (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object()
</UL>

<P><STRONG><a name="[1ee]"></a>operator delete (void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, basic.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, double)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, unsigned short, double)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[1e1]"></a>operator new[] (unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, basic.o(.text._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = operator new[] (unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
</UL>

<P><STRONG><a name="[1eb]"></a>operator new(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, basic.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = operator new(unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, unsigned short, double)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[1d7]"></a>__cxa_guard_acquire</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, cxa_guard.cpp.o(.text.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[1d8]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, cxa_guard.cpp.o(.text.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[102]"></a>__cxa_pure_virtual</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m10_rccalib.o(.rodata._ZTV9Mode_Base)
</UL>
<P><STRONG><a name="[140]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[174]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[351]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[107]"></a>cdcd_control_complete</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, cdc_device.o(.text.cdcd_control_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cdcd_control_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[106]"></a>cdcd_control_request</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, cdc_device.o(.text.cdcd_control_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cdcd_control_request &rArr; tud_control_xfer &rArr; _data_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_status
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_bit_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[103]"></a>cdcd_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cdc_device.o(.text.cdcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cdcd_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[105]"></a>cdcd_open</STRONG> (Thumb, 592 bytes, Stack size 64 bytes, cdc_device.o(.text.cdcd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cdcd_open &rArr; _prep_out_transaction &rArr; usbd_edpt_claim &rArr; osal_mutex_lock &rArr; osal_semaphore_wait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_open
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_within
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_type
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_next
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_len
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[104]"></a>cdcd_reset</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, cdc_device.o(.text.cdcd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cdcd_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[108]"></a>cdcd_xfer_cb</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, cdc_device.o(.text.cdcd_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cdcd_xfer_cb &rArr; tud_cdc_n_write_flush &rArr; usbd_edpt_release &rArr; osal_mutex_lock &rArr; osal_semaphore_wait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferBytesAvailable
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_rx_cb
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_n_write_flush
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[37a]"></a>dcd_connect</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dcd_synopsys.o(.text.dcd_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcd_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_init
</UL>

<P><STRONG><a name="[36a]"></a>dcd_edpt_clear_stall</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, dcd_synopsys.o(.text.dcd_edpt_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dcd_edpt_clear_stall &rArr; tu_edpt_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_clear_stall
</UL>

<P><STRONG><a name="[36d]"></a>dcd_edpt_open</STRONG> (Thumb, 792 bytes, Stack size 80 bytes, dcd_synopsys.o(.text.dcd_edpt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = dcd_edpt_open &rArr; get_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_max16
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_open
</UL>

<P><STRONG><a name="[370]"></a>dcd_edpt_stall</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, dcd_synopsys.o(.text.dcd_edpt_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dcd_edpt_stall &rArr; tu_edpt_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
</UL>

<P><STRONG><a name="[354]"></a>dcd_edpt_xfer</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, dcd_synopsys.o(.text.dcd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edpt_schedule_packets
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_address
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_status_stage_xact
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_stage_xact
</UL>

<P><STRONG><a name="[372]"></a>dcd_event_bus_reset</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, usbd.o(.text.dcd_event_bus_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dcd_event_bus_reset &rArr; dcd_event_handler &rArr; osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
</UL>

<P><STRONG><a name="[374]"></a>dcd_event_bus_signal</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, usbd.o(.text.dcd_event_bus_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dcd_event_bus_signal &rArr; dcd_event_handler &rArr; osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
</UL>

<P><STRONG><a name="[373]"></a>dcd_event_handler</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, usbd.o(.text.dcd_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dcd_event_handler &rArr; osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_xfer_complete
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_setup_received
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_bus_signal
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_bus_reset
</UL>

<P><STRONG><a name="[376]"></a>dcd_event_setup_received</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, usbd.o(.text.dcd_event_setup_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dcd_event_setup_received &rArr; dcd_event_handler &rArr; osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_epout_ints
</UL>

<P><STRONG><a name="[377]"></a>dcd_event_xfer_complete</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, usbd.o(.text.dcd_event_xfer_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dcd_event_xfer_complete &rArr; dcd_event_handler &rArr; osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_epout_ints
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_epin_ints
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[378]"></a>dcd_init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, dcd_synopsys.o(.text.dcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dcd_init &rArr; set_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_connect
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[37b]"></a>dcd_int_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dcd_synopsys.o(.text.dcd_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dcd_int_enable &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[37d]"></a>dcd_set_address</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, dcd_synopsys.o(.text.dcd_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dcd_set_address &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
</UL>

<P><STRONG><a name="[393]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, diskio.o(.text.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[394]"></a>disk_ioctl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(.text.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[368]"></a>disk_read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[390]"></a>disk_status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(.text.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[367]"></a>disk_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[33e]"></a>f_chmod</STRONG> (Thumb, 230 bytes, Stack size 120 bytes, ff.o(.text.f_chmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = f_chmod &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[2de]"></a>f_close</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ff.o(.text.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_close &rArr; f_sync &rArr; store_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[2c6]"></a>f_mkdir</STRONG> (Thumb, 574 bytes, Stack size 168 bytes, ff.o(.text.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[2c2]"></a>f_mkfs</STRONG> (Thumb, 6326 bytes, Stack size 168 bytes, ff.o(.text.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = f_mkfs &rArr; get_fattime &rArr; Get_RTC_Time &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[2c1]"></a>f_mount</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_mount &rArr; mount_volume &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[2dc]"></a>f_open</STRONG> (Thumb, 1458 bytes, Stack size 136 bytes, ff.o(.text.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[2dd]"></a>f_read</STRONG> (Thumb, 902 bytes, Stack size 56 bytes, ff.o(.text.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_read &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double)
</UL>

<P><STRONG><a name="[2c5]"></a>f_stat</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, ff.o(.text.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[341]"></a>f_sync</STRONG> (Thumb, 830 bytes, Stack size 112 bytes, ff.o(.text.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = f_sync &rArr; store_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[33f]"></a>f_unlink</STRONG> (Thumb, 610 bytes, Stack size 264 bytes, ff.o(.text.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[2df]"></a>f_write</STRONG> (Thumb, 1000 bytes, Stack size 56 bytes, ff.o(.text.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_write &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[396]"></a>ff_cre_syncobj</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ffsystem.o(.text.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ff_cre_syncobj &rArr; osMutexCreate &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[395]"></a>ff_del_syncobj</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffsystem.o(.text.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ff_del_syncobj &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[380]"></a>ff_memalloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ffsystem.o(.text.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[381]"></a>ff_memfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ffsystem.o(.text.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ff_memfree &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[39f]"></a>ff_oem2uni</STRONG> (Thumb, 410 bytes, Stack size 8 bytes, ffunicode.o(.text.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[38d]"></a>ff_rel_grant</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ffsystem.o(.text.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ff_rel_grant &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
</UL>

<P><STRONG><a name="[38f]"></a>ff_req_grant</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ffsystem.o(.text.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[39d]"></a>ff_uni2oem</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, ffunicode.o(.text.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[384]"></a>ff_wtoupper</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, ffunicode.o(.text.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[32c]"></a>getCPULoad</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cpu_load.o(.text.getCPULoad))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
</UL>

<P><STRONG><a name="[18a]"></a>getFlashSectorCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_flash.o(.text.getFlashSectorCount))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_status
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ioctl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_initialize
</UL>

<P><STRONG><a name="[189]"></a>getFlashSectorSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_flash.o(.text.getFlashSectorSize))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ioctl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_initialize
</UL>

<P><STRONG><a name="[391]"></a>get_fattime</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fatfs.o(.text.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_fattime &rArr; Get_RTC_Time &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[13b]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = main &rArr; init_Basic() &rArr; init_TimeBase() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2a4]"></a>mavlink_init_chan</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mavlink.o(.text.mavlink_init_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mavlink_init_chan &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(Port)
</UL>

<P><STRONG><a name="[30f]"></a>mavlink_lock_chan</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mavlink.o(.text.mavlink_lock_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mavlink_lock_chan &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[315]"></a>mavlink_unlock_chan</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mavlink.o(.text.mavlink_unlock_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mavlink_unlock_chan &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[10d]"></a>mscd_control_complete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, msc_device.o(.text.mscd_control_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mscd_control_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[10c]"></a>mscd_control_request</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, msc_device.o(.text.mscd_control_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mscd_control_request &rArr; tud_control_xfer &rArr; _data_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[109]"></a>mscd_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, msc_device.o(.text.mscd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mscd_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[10b]"></a>mscd_open</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, msc_device.o(.text.mscd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = mscd_open &rArr; usbd_open_edpt_pair &rArr; usbd_edpt_open &rArr; dcd_edpt_open &rArr; get_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[10a]"></a>mscd_reset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, msc_device.o(.text.mscd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mscd_reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[10e]"></a>mscd_xfer_cb</STRONG> (Thumb, 1648 bytes, Stack size 136 bytes, msc_device.o(.text.mscd_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = mscd_xfer_cb &rArr; proc_builtin_scsi &rArr; tud_msc_test_unit_ready_cb &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stalled
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_xfer_complete
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_write10_cb
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_set_sense
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_scsi_cb
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_bit_test
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdwr10_get_lba
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdwr10_get_blockcount
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[1d1]"></a>osKernelRunning</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(.text.osKernelRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[1d5]"></a>osKernelSysTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(.text.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[1d3]"></a>osMessageCreate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[1d4]"></a>osMessageGet</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, cmsis_os.o(.text.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[17f]"></a>osMessagePut</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>

<P><STRONG><a name="[399]"></a>osMutexCreate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(.text.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[39a]"></a>osMutexDelete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmsis_os.o(.text.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[39b]"></a>osMutexRelease</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>

<P><STRONG><a name="[39c]"></a>osMutexWait</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>

<P><STRONG><a name="[3b2]"></a>proc_builtin_scsi</STRONG> (Thumb, 804 bytes, Stack size 168 bytes, msc_device.o(.text.proc_builtin_scsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = proc_builtin_scsi &rArr; tud_msc_test_unit_ready_cb &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_is_writable_cb
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_set_sense
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_inquiry_cb
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_capacity_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[350]"></a>pvPortMalloc</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[40d]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[411]"></a>pxPortInitialiseStack</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[292]"></a>tud_cdc_n_write_flush</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, cdc_device.o(.text.tud_cdc_n_write_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tud_cdc_n_write_flush &rArr; usbd_edpt_release &rArr; osal_mutex_lock &rArr; osal_semaphore_wait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferBytesAvailable
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_release
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
</UL>

<P><STRONG><a name="[363]"></a>tud_cdc_rx_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_usb.o(.text.tud_cdc_rx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tud_cdc_rx_cb &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
</UL>

<P><STRONG><a name="[35c]"></a>tud_control_status</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usbd_control.o(.text.tud_control_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tud_control_status &rArr; _status_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_status_stage_xact
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_control_request
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_control_request
</UL>

<P><STRONG><a name="[35a]"></a>tud_control_xfer</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, usbd_control.o(.text.tud_control_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tud_control_xfer &rArr; _data_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_min16
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_status_stage_xact
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_stage_xact
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_control_request
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_control_request
</UL>

<P><STRONG><a name="[3d8]"></a>tud_descriptor_configuration_cb</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usb_descriptors.o(.text.tud_descriptor_configuration_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tud_descriptor_configuration_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
</UL>

<P><STRONG><a name="[3d7]"></a>tud_descriptor_device_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_descriptors.o(.text.tud_descriptor_device_cb))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
</UL>

<P><STRONG><a name="[3d9]"></a>tud_descriptor_string_cb</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, usb_descriptors.o(.text.tud_descriptor_string_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tud_descriptor_string_cb &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
</UL>

<P><STRONG><a name="[3ed]"></a>tud_init</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, usbd.o(.text.tud_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tud_init &rArr; osal_mutex_create &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_queue_create
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_create
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_driver
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_enable
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_init
</UL>

<P><STRONG><a name="[3da]"></a>tud_mount_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_usb.o(.text.tud_mount_cb))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
</UL>

<P><STRONG><a name="[3ca]"></a>tud_msc_capacity_cb</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, msc_disk.o(.text.tud_msc_capacity_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tud_msc_capacity_cb &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[3cb]"></a>tud_msc_inquiry_cb</STRONG> (Thumb, 174 bytes, Stack size 104 bytes, msc_disk.o(.text.tud_msc_inquiry_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tud_msc_inquiry_cb &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[3cc]"></a>tud_msc_is_writable_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_usb.o(.text.tud_msc_is_writable_cb))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
</UL>

<P><STRONG><a name="[3ce]"></a>tud_msc_read10_cb</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, msc_disk.o(.text.tud_msc_read10_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tud_msc_read10_cb &rArr; BSP_SD_IsDetected
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[3b3]"></a>tud_msc_scsi_cb</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, msc_disk.o(.text.tud_msc_scsi_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tud_msc_scsi_cb &rArr; tud_msc_set_sense
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_set_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[3b4]"></a>tud_msc_set_sense</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, msc_device.o(.text.tud_msc_set_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tud_msc_set_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_scsi_cb
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[3c9]"></a>tud_msc_test_unit_ready_cb</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, msc_disk.o(.text.tud_msc_test_unit_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tud_msc_test_unit_ready_cb &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD_Init_Complete
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SD_Init_Complete
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[3b8]"></a>tud_msc_write10_cb</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, msc_disk.o(.text.tud_msc_write10_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tud_msc_write10_cb &rArr; BSP_SD_IsDetected
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[3f0]"></a>tud_suspend_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_usb.o(.text.tud_suspend_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tud_suspend_cb &rArr; usbd_reset &rArr; get_driver
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
</UL>

<P><STRONG><a name="[3f2]"></a>tud_umount_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_usb.o(.text.tud_umount_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tud_umount_cb &rArr; usbd_reset &rArr; get_driver
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
</UL>

<P><STRONG><a name="[326]"></a>tusb_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tusb.o(.text.tusb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tusb_init &rArr; tud_init &rArr; osal_mutex_create &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15usb_device_taskPv
</UL>

<P><STRONG><a name="[3f4]"></a>tusb_inited</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tusb.o(.text.tusb_inited))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
</UL>

<P><STRONG><a name="[1cd]"></a>usb_handler</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, dcd_synopsys.o(.text.usb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = usb_handler &rArr; handle_epin_ints &rArr; dcd_event_xfer_complete &rArr; dcd_event_handler &rArr; osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_bus_signal
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_bus_reset
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_turnaround
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rxflvl_ints
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_epout_ints
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_epin_ints
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_speed
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[327]"></a>usb_task</STRONG> (Thumb, 608 bytes, Stack size 64 bytes, usbd.o(.text.usb_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = usb_task &rArr; process_control_request &rArr; process_get_descriptor &rArr; tud_control_xfer &rArr; _data_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_umount_cb
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_suspend_cb
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_inited
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_queue_receive
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_driver
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15usb_device_taskPv
</UL>

<P><STRONG><a name="[3f8]"></a>usbd_control_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_control.o(.text.usbd_control_reset))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset
</UL>

<P><STRONG><a name="[3a6]"></a>usbd_control_set_complete_callback</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbd_control.o(.text.usbd_control_set_complete_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usbd_control_set_complete_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_class_control
</UL>

<P><STRONG><a name="[3d2]"></a>usbd_control_set_request</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, usbd_control.o(.text.usbd_control_set_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usbd_control_set_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
</UL>

<P><STRONG><a name="[3f6]"></a>usbd_control_xfer_cb</STRONG> (Thumb, 504 bytes, Stack size 56 bytes, usbd_control.o(.text.usbd_control_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = usbd_control_xfer_cb &rArr; _data_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_status_stage_xact
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_stage_xact
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
</UL>

<P><STRONG><a name="[356]"></a>usbd_edpt_claim</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, usbd.o(.text.usbd_edpt_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usbd_edpt_claim &rArr; osal_mutex_lock &rArr; osal_semaphore_wait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_unlock
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_n_write_flush
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
</UL>

<P><STRONG><a name="[3d5]"></a>usbd_edpt_clear_stall</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbd.o(.text.usbd_edpt_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_edpt_clear_stall &rArr; dcd_edpt_clear_stall &rArr; tu_edpt_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
</UL>

<P><STRONG><a name="[361]"></a>usbd_edpt_open</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, usbd.o(.text.usbd_edpt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbd_edpt_open &rArr; dcd_edpt_open &rArr; get_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[3ec]"></a>usbd_edpt_release</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, usbd.o(.text.usbd_edpt_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usbd_edpt_release &rArr; osal_mutex_lock &rArr; osal_semaphore_wait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_unlock
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_n_write_flush
</UL>

<P><STRONG><a name="[3b5]"></a>usbd_edpt_stall</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbd.o(.text.usbd_edpt_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usbd_edpt_stall &rArr; dcd_edpt_stall &rArr; tu_edpt_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[3ba]"></a>usbd_edpt_stalled</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbd.o(.text.usbd_edpt_stalled))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_edpt_stalled &rArr; tu_edpt_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
</UL>

<P><STRONG><a name="[357]"></a>usbd_edpt_xfer</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, usbd.o(.text.usbd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_n_write_flush
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_open
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[362]"></a>usbd_open_edpt_pair</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, usbd.o(.text.usbd_open_edpt_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = usbd_open_edpt_pair &rArr; usbd_edpt_open &rArr; dcd_edpt_open &rArr; get_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_next
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_open
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[3f1]"></a>usbd_reset</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, usbd.o(.text.usbd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_reset &rArr; get_driver
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_reset
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_driver
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_umount_cb
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_suspend_cb
</UL>

<P><STRONG><a name="[3dc]"></a>uxListRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[3f5]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, queue.o(.text.uxQueueSpacesAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxQueueSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
</UL>

<P><STRONG><a name="[405]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[400]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, static_mem.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[413]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, static_mem.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[3f9]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationStackOverflowHook &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[412]"></a>vApplicationTickHook</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, cpu_load.o(.text.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[9d]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, event_groups.o(.text.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Address Reference Count : 5]<UL><LI> gui.o(.text.DMA2D_IRQHandler)
<LI> drv_flash.o(.text.QUADSPI_IRQHandler)
<LI> drv_extiic.o(.text.I2C1_EV_IRQHandler)
<LI> drv_extiic.o(.text.I2C1_ER_IRQHandler)
<LI> drv_oled.o(.text.SPI4_IRQHandler)
</UL>
<P><STRONG><a name="[3e0]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[3e3]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[3de]"></a>vListInsert</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[3dd]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[29a]"></a>vPortEnterCritical</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[29c]"></a>vPortExitCritical</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[34f]"></a>vPortFree</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
</UL>

<P><STRONG><a name="[406]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[40c]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[3e2]"></a>vQueueAddToRegistry</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[3c1]"></a>vQueueDelete</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, queue.o(.text.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[3e7]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1b7]"></a>vTaskDelay</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GUI()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtIIC()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[317]"></a>vTaskDelayUntil</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[290]"></a>vTaskDelete</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[409]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[3ea]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[3fc]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[3fb]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[3fd]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[3fe]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[3fa]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tasks.o(.text.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[3ff]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[3a7]"></a>vTaskStartScheduler</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e5]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1ce]"></a>vTaskSwitchContext</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitIdleTask
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterIdleTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[186]"></a>xEventGroupClearBits</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(const unsigned char*, unsigned short, double, double)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(const unsigned char*, unsigned short, double, double)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSectors
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadSectors
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
</UL>

<P><STRONG><a name="[1de]"></a>xEventGroupCreate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_GUI.cpp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart3.cpp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart1.cpp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart5.cpp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart8.cpp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart7.cpp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ExtIIC.cpp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Oled.cpp
</UL>

<P><STRONG><a name="[287]"></a>xEventGroupSetBits</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, event_groups.o(.text.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
</UL>

<P><STRONG><a name="[187]"></a>xEventGroupWaitBits</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, event_groups.o(.text.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned, double, double)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned, double, double)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned, double, double)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned, double, double)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSectors
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadSectors
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short, double)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>

<P><STRONG><a name="[402]"></a>xPortStartScheduler</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1df]"></a>xQueueCreateMutex</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, queue.o(.text.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SDStorage.cpp
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Parameters()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Parameters.cpp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Missions.cpp
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Sensors.cpp
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Receiver.cpp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ExtIIC.cpp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Oled.cpp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_init_chan
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Main.cpp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
</UL>

<P><STRONG><a name="[3c0]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, queue.o(.text.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_create
</UL>

<P><STRONG><a name="[1e2]"></a>xQueueGenericCreate</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Modes.cpp
</UL>

<P><STRONG><a name="[3bd]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_queue_create
</UL>

<P><STRONG><a name="[321]"></a>xQueueGenericReset</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
</UL>

<P><STRONG><a name="[18d]"></a>xQueueGenericSend</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU(vector3&lang;double&rang;*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(const char*, unsigned short, double)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterIteratorMoveNext()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersIterator()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_Z(PosSensorHealthInf1*, double)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, double)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart3(unsigned char*, unsigned short, double, double)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart1(unsigned char*, unsigned short, double, double)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart5(unsigned char*, unsigned short, double, double)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart8(double)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart8(unsigned char*, unsigned short, double, double)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart7(unsigned char*, unsigned short, double, double)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, unsigned short, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_queue_send
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_unlock
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
</UL>

<P><STRONG><a name="[3bf]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_queue_send
</UL>

<P><STRONG><a name="[3c2]"></a>xQueueGiveFromISR</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, queue.o(.text.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[1dd]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(.text.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned, double, double)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_USBD_VCOM()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USBD_VCOM(unsigned char*, unsigned short, double, double)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart3()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(const unsigned char*, unsigned short, double, double)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart1()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(const unsigned char*, unsigned short, double, double)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned, double, double)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned, double, double)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned, double, double)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short, double)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastXYCtrlTime(TIME*, double)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastZCtrlTime(TIME*, double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[282]"></a>xQueueReceive</STRONG> (Thumb, 478 bytes, Stack size 56 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_queue_receive
</UL>

<P><STRONG><a name="[3be]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, queue.o(.text.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[18c]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 478 bytes, Stack size 56 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, double)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU(vector3&lang;double&rang;*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(const char*, unsigned short, double)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterIteratorMoveNext()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersIterator()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const SName*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_Z(PosSensorHealthInf1*, double)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, double)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart3(unsigned char*, unsigned short, double, double)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart1(unsigned char*, unsigned short, double, double)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart5(unsigned char*, unsigned short, double, double)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart8(double)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart8(unsigned char*, unsigned short, double, double)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart7(unsigned char*, unsigned short, double, double)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, unsigned short, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_semaphore_wait
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
</UL>

<P><STRONG><a name="[1cc]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(.text.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned, double, double)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USBD_VCOM(unsigned char*, unsigned short, double, double)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_USBD_VCOM(double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(const unsigned char*, unsigned short, double, double)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart3(double)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(const unsigned char*, unsigned short, double, double)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart1(double)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned, double, double)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned, double, double)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned, double, double)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short, double)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastXYCtrlTime(TIME*, double)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastZCtrlTime(TIME*, double)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[364]"></a>xStreamBufferBytesAvailable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stream_buffer.o(.text.xStreamBufferBytesAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_n_write_flush
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
</UL>

<P><STRONG><a name="[22e]"></a>xStreamBufferGenericCreate</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stream_buffer.o(.text.xStreamBufferGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[1e3]"></a>xStreamBufferGenericCreateStatic</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stream_buffer.o(.text.xStreamBufferGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = xStreamBufferGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SDStorage.cpp
</UL>

<P><STRONG><a name="[1e4]"></a>xStreamBufferReceive</STRONG> (Thumb, 594 bytes, Stack size 56 bytes, stream_buffer.o(.text.xStreamBufferReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_n_write_flush
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USBD_VCOM(unsigned char*, unsigned short, double, double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(const unsigned char*, unsigned short, double, double)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart3(unsigned char*, unsigned short, double, double)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(const unsigned char*, unsigned short, double, double)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart1(unsigned char*, unsigned short, double, double)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart5(unsigned char*, unsigned short, double, double)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart8(unsigned char*, unsigned short, double, double)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart7(unsigned char*, unsigned short, double, double)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
</UL>

<P><STRONG><a name="[239]"></a>xStreamBufferReset</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stream_buffer.o(.text.xStreamBufferReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = xStreamBufferReset
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart8(double)
</UL>

<P><STRONG><a name="[1e9]"></a>xStreamBufferSend</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, stream_buffer.o(.text.xStreamBufferSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(const char*, unsigned short, double)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_rx_cb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(const unsigned char*, unsigned short, double, double)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(const unsigned char*, unsigned short, double, double)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
</UL>

<P><STRONG><a name="[1db]"></a>xStreamBufferSendFromISR</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, stream_buffer.o(.text.xStreamBufferSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xStreamBufferSendFromISR &rArr; prvWriteMessageToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[40a]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1fb]"></a>xTaskCreate</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Debug()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GUI()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtSPL06()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_TFMini()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtMag()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
</UL>

<P><STRONG><a name="[230]"></a>xTaskCreateStatic</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[2d4]"></a>xTaskGenericNotify</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, tasks.o(.text.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUAceelUpdate(unsigned char)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUGyroUpdate(unsigned char)
</UL>

<P><STRONG><a name="[410]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, tasks.o(.text.xTaskGenericNotifyFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskGenericNotifyFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>

<P><STRONG><a name="[2cd]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
</UL>

<P><STRONG><a name="[3bb]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
</UL>

<P><STRONG><a name="[2be]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[3bc]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskGetTickCountFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[1d6]"></a>xTaskIncrementTick</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[40f]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(.text.xTaskNotifyStateClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskNotifyStateClear
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>

<P><STRONG><a name="[21e]"></a>xTaskNotifyWait</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tasks.o(.text.xTaskNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
</UL>

<P><STRONG><a name="[40b]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[40e]"></a>xTaskPriorityInherit</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[3e9]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[3e6]"></a>xTaskResumeAll</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[2bd]"></a>xTimerCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, timers.o(.text.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTimerCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
</UL>

<P><STRONG><a name="[401]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2bf]"></a>xTimerGenericCommand</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23UltrasonicTimerCallbackPv
</UL>

<P><STRONG><a name="[183]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, timers.o(.text.xTimerPendFunctionCallFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUADSPI_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[415]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[414]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[416]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[417]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[15b]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[15c]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[418]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[15f]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[422]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[243]"></a>__hardfp_acos</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, acos.o(i.__hardfp_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_acos &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[20d]"></a>__hardfp_asin</STRONG> (Thumb, 432 bytes, Stack size 72 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_asin &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[41f]"></a>__hardfp_atan</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[20c]"></a>__hardfp_atan2</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[322]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
</UL>

<P><STRONG><a name="[28c]"></a>__hardfp_cos</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(double, double, double, double, double)
</UL>

<P><STRONG><a name="[244]"></a>__hardfp_exp</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
</UL>

<P><STRONG><a name="[31d]"></a>__hardfp_nan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nan.o(i.__hardfp_nan))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[2a9]"></a>__hardfp_pow</STRONG> (Thumb, 2108 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LedBrightness(float, float, float)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
</UL>

<P><STRONG><a name="[20b]"></a>__hardfp_sqrt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31throttle_nonlinear_compensationPd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYZAutoSpeed(double)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
</UL>

<P><STRONG><a name="[207]"></a>__hardfp_tan</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(double, double, double, double, double)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[425]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 646 bytes, Stack size 144 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[427]"></a>__kernel_cos</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __kernel_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[41b]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[426]"></a>__kernel_sin</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __kernel_sin &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[42b]"></a>__kernel_tan</STRONG> (Thumb, 434 bytes, Stack size 96 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_tan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[429]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[419]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[420]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[41a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[428]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[41d]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[424]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[423]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[145]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[421]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[41e]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[41c]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[132]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[42d]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[478]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[430]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
</UL>

<P><STRONG><a name="[12c]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[479]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[47a]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[312]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
</UL>

<P><STRONG><a name="[42f]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[128]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[42e]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[42a]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[431]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10f]"></a>_GLOBAL__sub_I_SDStorage.cpp</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sdstorage.o(.text._GLOBAL__sub_I_SDStorage.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_SDStorage.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdstorage.o(.init_array)
</UL>
<P><STRONG><a name="[b8]"></a>_ZL8SDS_TaskPv</STRONG> (Thumb, 1280 bytes, Stack size 1016 bytes, sdstorage.o(.text._ZL8SDS_TaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = _ZL8SDS_TaskPv &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdstorage.o(.text._Z14init_SDStoragev)
</UL>
<P><STRONG><a name="[110]"></a>_GLOBAL__sub_I_Parameters.cpp</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, parameters.o(.text._GLOBAL__sub_I_Parameters.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _GLOBAL__sub_I_Parameters.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.init_array)
</UL>
<P><STRONG><a name="[111]"></a>_GLOBAL__sub_I_GUI.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui.o(.text._GLOBAL__sub_I_GUI.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_GUI.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(.init_array)
</UL>
<P><STRONG><a name="[c7]"></a>_ZL10GUI_ServerPv</STRONG> (Thumb, 3504 bytes, Stack size 696 bytes, gui.o(.text._ZL10GUI_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = _ZL10GUI_ServerPv &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_Z(PosSensorHealthInf1*, double)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13DrawFont32x16PKcttt
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12DrawFont16x8PKcttt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(.text._Z8init_GUIv)
</UL>
<P><STRONG><a name="[318]"></a>_ZL12DrawFont16x8PKcttt</STRONG> (Thumb, 222 bytes, Stack size 28 bytes, gui.o(.text._ZL12DrawFont16x8PKcttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _ZL12DrawFont16x8PKcttt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[316]"></a>_ZL13DrawFont32x16PKcttt</STRONG> (Thumb, 318 bytes, Stack size 28 bytes, gui.o(.text._ZL13DrawFont32x16PKcttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _ZL13DrawFont32x16PKcttt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[112]"></a>_GLOBAL__sub_I_Missions.cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, missions.o(.text._GLOBAL__sub_I_Missions.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_Missions.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> missions.o(.init_array)
</UL>
<P><STRONG><a name="[198]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[199]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1cf]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 360 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetCmdResp1))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[19e]"></a>SD_FindSCR</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, stm32h7xx_hal_sd.o(.text.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_FindSCR &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[3e8]"></a>prvUnlockQueue</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[3eb]"></a>prvWriteMessageToBuffer</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, stream_buffer.o(.text.prvWriteMessageToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvWriteMessageToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>

<P><STRONG><a name="[3db]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[3df]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[ca]"></a>prvIdleTask</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[3e1]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, timers.o(.text.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvInitialiseNewTimer &rArr; xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[3e4]"></a>prvSampleTimeNow</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[cb]"></a>prvTimerTask</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[408]"></a>prvPortStartFirstTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c9]"></a>prvTaskExitError</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[407]"></a>vPortEnableVFP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[113]"></a>_GLOBAL__sub_I_Sensors.cpp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sensors.o(.text._GLOBAL__sub_I_Sensors.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_Sensors.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.init_array)
</UL>
<P><STRONG><a name="[114]"></a>_GLOBAL__sub_I_Receiver.cpp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, receiver.o(.text._GLOBAL__sub_I_Receiver.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _GLOBAL__sub_I_Receiver.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> receiver.o(.init_array)
</UL>
<P><STRONG><a name="[99]"></a>_ZL13BMI088GyroTCBPvj</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, drv_sensors.o(.text._ZL13BMI088GyroTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _ZL13BMI088GyroTCBPvj &rArr; IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUGyroUpdate(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[9a]"></a>_ZL14BMI088AccelTCBPvj</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, drv_sensors.o(.text._ZL14BMI088AccelTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _ZL14BMI088AccelTCBPvj &rArr; IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUAceelUpdate(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[184]"></a>_ZL26SPI1_TransmitReceive_StartPKhPht</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, drv_sensors.o(.text._ZL26SPI1_TransmitReceive_StartPKhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ZL26SPI1_TransmitReceive_StartPKhPht
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>_ZL8SPL06TCBPvj</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, drv_sensors.o(.text._ZL8SPL06TCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _ZL8SPL06TCBPvj &rArr; PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[9b]"></a>_ZL9AK8975TCBPvj</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_sensors.o(.text._ZL9AK8975TCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _ZL9AK8975TCBPvj &rArr; IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[b6]"></a>_ZL15usb_device_taskPv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_usb.o(.text._ZL15usb_device_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _ZL15usb_device_taskPv &rArr; usb_task &rArr; process_control_request &rArr; process_get_descriptor &rArr; tud_control_xfer &rArr; _data_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[115]"></a>_GLOBAL__sub_I_drv_Uart1.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart1.o(.text._GLOBAL__sub_I_drv_Uart1.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_drv_Uart1.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.init_array)
</UL>
<P><STRONG><a name="[a3]"></a>_ZL5TxTCBPvj</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, drv_uart1.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _ZL5TxTCBPvj &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text.USART1_IRQHandler)
</UL>
<P><STRONG><a name="[116]"></a>_GLOBAL__sub_I_drv_Uart3.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart3.o(.text._GLOBAL__sub_I_drv_Uart3.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_drv_Uart3.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.init_array)
</UL>
<P><STRONG><a name="[a5]"></a>_ZL5TxTCBPvj</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, drv_uart3.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _ZL5TxTCBPvj &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text.USART3_IRQHandler)
</UL>
<P><STRONG><a name="[117]"></a>_GLOBAL__sub_I_drv_Uart5.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart5.o(.text._GLOBAL__sub_I_drv_Uart5.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_drv_Uart5.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.init_array)
</UL>
<P><STRONG><a name="[a0]"></a>_ZL5TxTCBPvj</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, drv_uart5.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _ZL5TxTCBPvj &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text.UART5_IRQHandler)
</UL>
<P><STRONG><a name="[118]"></a>_GLOBAL__sub_I_drv_Uart7.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart7.o(.text._GLOBAL__sub_I_drv_Uart7.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_drv_Uart7.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.init_array)
</UL>
<P><STRONG><a name="[a1]"></a>_ZL5TxTCBPvj</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, drv_uart7.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _ZL5TxTCBPvj &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text.UART7_IRQHandler)
</UL>
<P><STRONG><a name="[119]"></a>_GLOBAL__sub_I_drv_Uart8.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart8.o(.text._GLOBAL__sub_I_drv_Uart8.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_drv_Uart8.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.init_array)
</UL>
<P><STRONG><a name="[a2]"></a>_ZL5TxTCBPvj</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, drv_uart8.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _ZL5TxTCBPvj &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text.UART8_IRQHandler)
</UL>
<P><STRONG><a name="[b1]"></a>_ZL10GPS_ServerPv</STRONG> (Thumb, 2872 bytes, Stack size 400 bytes, drv_gps.o(.text._ZL10GPS_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = _ZL10GPS_ServerPv &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned, double, double)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart8(double)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart8(unsigned char*, unsigned short, double, double)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gps.o(.text._Z12init_drv_GPSv)
</UL>
<P><STRONG><a name="[11a]"></a>_GLOBAL__sub_I_drv_ExtIIC.cpp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_extiic.o(.text._GLOBAL__sub_I_drv_ExtIIC.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_drv_ExtIIC.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extiic.o(.init_array)
</UL>
<P><STRONG><a name="[11b]"></a>_GLOBAL__sub_I_drv_ExtMag.cpp</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, drv_extmag.o(.text._GLOBAL__sub_I_drv_ExtMag.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_drv_ExtMag.cpp &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extmag.o(.init_array)
</UL>
<P><STRONG><a name="[c1]"></a>_ZL13ExtMag_ServerPv</STRONG> (Thumb, 816 bytes, Stack size 32 bytes, drv_extmag.o(.text._ZL13ExtMag_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = _ZL13ExtMag_ServerPv &rArr; IMUMagnetometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, double)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extmag.o(.text._Z15init_drv_ExtMagv)
</UL>
<P><STRONG><a name="[11c]"></a>_GLOBAL__sub_I_drv_Oled.cpp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_oled.o(.text._GLOBAL__sub_I_drv_Oled.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_drv_Oled.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_oled.o(.init_array)
</UL>
<P><STRONG><a name="[27b]"></a>_ZL12LCD_Writ_BusPvjd</STRONG> (Thumb, 1686 bytes, Stack size 64 bytes, drv_oled.o(.text._ZL12LCD_Writ_BusPvjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _ZL12LCD_Writ_BusPvjd &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short, double)
</UL>

<P><STRONG><a name="[9f]"></a>_ZL13UltrasonicTCBPvj</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, drv_ultrasonic.o(.text._ZL13UltrasonicTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = _ZL13UltrasonicTCBPvj &rArr; PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ultrasonic.o(.text.TIM8_BRK_TIM12_IRQHandler)
</UL>
<P><STRONG><a name="[c5]"></a>_ZL23UltrasonicTimerCallbackPv</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, drv_ultrasonic.o(.text._ZL23UltrasonicTimerCallbackPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _ZL23UltrasonicTimerCallbackPv &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ultrasonic.o(.text._Z19init_drv_ultrasonicv)
</UL>
<P><STRONG><a name="[c6]"></a>_ZL18OpticalFlow_ServerPv</STRONG> (Thumb, 720 bytes, Stack size 136 bytes, drv_opticalflow.o(.text._ZL18OpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = _ZL18OpticalFlow_ServerPv &rArr; PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart5(unsigned char*, unsigned short, double, double)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow.o(.text._Z20init_drv_OpticalFlowv)
</UL>
<P><STRONG><a name="[c2]"></a>_ZL13TFMini_ServerPv</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, drv_tfmini.o(.text._ZL13TFMini_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = _ZL13TFMini_ServerPv &rArr; PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, double)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart7(unsigned char*, unsigned short, double, double)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_tfmini.o(.text._Z15init_drv_TFMiniv)
</UL>
<P><STRONG><a name="[11d]"></a>_GLOBAL__sub_I_drv_ADC.cpp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_adc.o(.text._GLOBAL__sub_I_drv_ADC.cpp))
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.init_array)
</UL>
<P><STRONG><a name="[c3]"></a>_ZL15ExtSPL06_ServerPv</STRONG> (Thumb, 992 bytes, Stack size 16 bytes, drv_extspl06.o(.text._ZL15ExtSPL06_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _ZL15ExtSPL06_ServerPv &rArr; PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extspl06.o(.text._Z17init_drv_ExtSPL06v)
</UL>
<P><STRONG><a name="[365]"></a>create_chain</STRONG> (Thumb, 1022 bytes, Stack size 72 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[37f]"></a>dir_clear</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, ff.o(.text.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[382]"></a>dir_find</STRONG> (Thumb, 1032 bytes, Stack size 56 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[385]"></a>dir_next</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[386]"></a>dir_read</STRONG> (Thumb, 1060 bytes, Stack size 40 bytes, ff.o(.text.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[388]"></a>dir_register</STRONG> (Thumb, 2882 bytes, Stack size 184 bytes, ff.o(.text.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[383]"></a>dir_sdi</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[38c]"></a>follow_path</STRONG> (Thumb, 1474 bytes, Stack size 56 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
</UL>

<P><STRONG><a name="[366]"></a>get_fat</STRONG> (Thumb, 954 bytes, Stack size 32 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[398]"></a>get_fileinfo</STRONG> (Thumb, 804 bytes, Stack size 40 bytes, ff.o(.text.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fileinfo &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[387]"></a>load_xdir</STRONG> (Thumb, 1212 bytes, Stack size 40 bytes, ff.o(.text.load_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[38b]"></a>mount_volume</STRONG> (Thumb, 3660 bytes, Stack size 48 bytes, ff.o(.text.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mount_volume &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
</UL>

<P><STRONG><a name="[369]"></a>put_fat</STRONG> (Thumb, 696 bytes, Stack size 40 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = put_fat &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[39e]"></a>put_utf</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, ff.o(.text.put_utf))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[392]"></a>remove_chain</STRONG> (Thumb, 672 bytes, Stack size 56 bytes, ff.o(.text.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = remove_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[389]"></a>store_xdir</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, ff.o(.text.store_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = store_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[38e]"></a>sync_fs</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, ff.o(.text.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sync_fs &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
</UL>

<P><STRONG><a name="[cc]"></a>Flash_initialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flash_diskio.o(.text.Flash_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorSize
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_diskio.o(.rodata.Flash_Driver)
</UL>
<P><STRONG><a name="[d0]"></a>Flash_ioctl</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, flash_diskio.o(.text.Flash_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorSize
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_diskio.o(.rodata.Flash_Driver)
</UL>
<P><STRONG><a name="[ce]"></a>Flash_read</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, flash_diskio.o(.text.Flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Flash_read &rArr; FlashReadSectors &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadSectors
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_diskio.o(.rodata.Flash_Driver)
</UL>
<P><STRONG><a name="[cd]"></a>Flash_status</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash_diskio.o(.text.Flash_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_status
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_diskio.o(.rodata.Flash_Driver)
</UL>
<P><STRONG><a name="[cf]"></a>Flash_write</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, flash_diskio.o(.text.Flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Flash_write &rArr; FlashWriteSectors &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSectors
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_diskio.o(.rodata.Flash_Driver)
</UL>
<P><STRONG><a name="[ac]"></a>_ZL10Debug_taskPv</STRONG> (Thumb, 1124 bytes, Stack size 936 bytes, debug.o(.text._ZL10Debug_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = _ZL10Debug_taskPv &rArr; _ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.text._Z10init_Debugv)
</UL>
<P><STRONG><a name="[333]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 1174 bytes, Stack size 424 bytes, debug.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff
</UL>

<P><STRONG><a name="[314]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, debug.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
</UL>

<P><STRONG><a name="[313]"></a>_ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff</STRONG> (Thumb, 1148 bytes, Stack size 248 bytes, debug.o(.text._ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = _ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
</UL>

<P><STRONG><a name="[11e]"></a>_GLOBAL__sub_I_Commulink.cpp</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, commulink.o(.text._GLOBAL__sub_I_Commulink.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GLOBAL__sub_I_Commulink.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.init_array)
</UL>
<P><STRONG><a name="[319]"></a>_ZL10LEDRefreshf</STRONG> (Thumb, 1144 bytes, Stack size 16 bytes, commulink.o(.text._ZL10LEDRefreshf))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _ZL10LEDRefreshf &rArr; set_LedBrightness(float, float, float) &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LedBrightness(float, float, float)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BuzzerOnOff(bool)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BuzzerFreq(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[b7]"></a>_ZL16Commulink_ServerPv</STRONG> (Thumb, 3824 bytes, Stack size 1064 bytes, commulink.o(.text._ZL16Commulink_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = _ZL16Commulink_ServerPv &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterIteratorMoveNext()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned*)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, double)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LEDRefreshf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.text._Z14init_Commulinkv)
</UL>
<P><STRONG><a name="[32a]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 1174 bytes, Stack size 424 bytes, commulink.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[329]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, commulink.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[328]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 1018 bytes, Stack size 224 bytes, commulink.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[a6]"></a>__cxx_global_array_dtor</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, commulink.o(.text.__cxx_global_array_dtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __cxx_global_array_dtor &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.text._GLOBAL__sub_I_Commulink.cpp)
</UL>
<P><STRONG><a name="[d3]"></a>_ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mavlinkcmdprocess.o(.text._ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message &rArr; Set_RTC_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[334]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 1174 bytes, Stack size 424 bytes, mavlinkcmdprocess.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[d1]"></a>_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message</STRONG> (Thumb, 152 bytes, Stack size 352 bytes, mavlinkcmdprocess.o(.text._ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = _ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_WGA_Correct()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_get_WGA(unsigned*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[d2]"></a>_ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, mavlinkcmdprocess.o(.text._ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = _ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[33a]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, mavlinkcmdprocess.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
</UL>

<P><STRONG><a name="[339]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 1018 bytes, Stack size 224 bytes, mavlinkcmdprocess.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
</UL>

<P><STRONG><a name="[d4]"></a>_ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mavlinkcmdprocess.o(.text._ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message))
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[d5]"></a>_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message</STRONG> (Thumb, 120 bytes, Stack size 328 bytes, mavlinkcmdprocess.o(.text._ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = _ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[ed]"></a>_ZL13Msg74_VFR_HUDhP17__mavlink_message</STRONG> (Thumb, 368 bytes, Stack size 128 bytes, mavlinksendfuncs.o(.text._ZL13Msg74_VFR_HUDhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = _ZL13Msg74_VFR_HUDhP17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU(vector3&lang;double&rang;*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[e7]"></a>_ZL14Msg30_ATTITUDEhP17__mavlink_message</STRONG> (Thumb, 664 bytes, Stack size 144 bytes, mavlinksendfuncs.o(.text._ZL14Msg30_ATTITUDEhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = _ZL14Msg30_ATTITUDEhP17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[e5]"></a>_ZL16Msg01_SYS_STATUShP17__mavlink_message</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, mavlinksendfuncs.o(.text._ZL16Msg01_SYS_STATUShP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _ZL16Msg01_SYS_STATUShP17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCPULoad
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[e6]"></a>_ZL17Msg24_GPS_RAW_INThP17__mavlink_message</STRONG> (Thumb, 416 bytes, Stack size 216 bytes, mavlinksendfuncs.o(.text._ZL17Msg24_GPS_RAW_INThP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = _ZL17Msg24_GPS_RAW_INThP17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[ec]"></a>_ZL17Msg65_RC_CHANNELShP17__mavlink_message</STRONG> (Thumb, 752 bytes, Stack size 184 bytes, mavlinksendfuncs.o(.text._ZL17Msg65_RC_CHANNELShP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = _ZL17Msg65_RC_CHANNELShP17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[335]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 1174 bytes, Stack size 424 bytes, mavlinksendfuncs.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[e9]"></a>_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message</STRONG> (Thumb, 408 bytes, Stack size 96 bytes, mavlinksendfuncs.o(.text._ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = _ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU(vector3&lang;double&rang;*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[eb]"></a>_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message</STRONG> (Thumb, 488 bytes, Stack size 176 bytes, mavlinksendfuncs.o(.text._ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = _ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[e8]"></a>_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message</STRONG> (Thumb, 544 bytes, Stack size 136 bytes, mavlinksendfuncs.o(.text._ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = _ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[ea]"></a>_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message</STRONG> (Thumb, 888 bytes, Stack size 360 bytes, mavlinksendfuncs.o(.text._ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = _ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU(vector3&lang;double&rang;*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[323]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 1018 bytes, Stack size 224 bytes, mavlinksendfuncs.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg65_RC_CHANNELShP17__mavlink_message
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
</UL>

<P><STRONG><a name="[d6]"></a>_ZL14Msg0_HEARTBEAThPK17__mavlink_message</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mavlinkrcprocess.o(.text._ZL14Msg0_HEARTBEAThPK17__mavlink_message))
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[d7]"></a>_ZL14Msg11_SET_MODEhPK17__mavlink_message</STRONG> (Thumb, 200 bytes, Stack size 136 bytes, mavlinkrcprocess.o(.text._ZL14Msg11_SET_MODEhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _ZL14Msg11_SET_MODEhPK17__mavlink_message &rArr; SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[da]"></a>_ZL15Msg23_PARAM_SEThPK17__mavlink_message</STRONG> (Thumb, 656 bytes, Stack size 400 bytes, mavlinkrcprocess.o(.text._ZL15Msg23_PARAM_SEThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = _ZL15Msg23_PARAM_SEThPK17__mavlink_message &rArr; UpdateParam(SName, unsigned long long, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[db]"></a>_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message</STRONG> (Thumb, 496 bytes, Stack size 400 bytes, mavlinkrcprocess.o(.text._ZL18Msg39_MISSION_ITEMhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 4128 + Unknown Stack Size
<LI>Call Chain = _ZL18Msg39_MISSION_ITEMhPK17__mavlink_message &rArr; addMission(MissionInf, bool, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUploadingMissionsCount()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[e4]"></a>_ZL18Msg76_COMMAND_LONGhPK17__mavlink_message</STRONG> (Thumb, 296 bytes, Stack size 136 bytes, mavlinkrcprocess.o(.text._ZL18Msg76_COMMAND_LONGhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _ZL18Msg76_COMMAND_LONGhPK17__mavlink_message &rArr; SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[df]"></a>_ZL19Msg44_MISSION_COUNThPK17__mavlink_message</STRONG> (Thumb, 272 bytes, Stack size 352 bytes, mavlinkrcprocess.o(.text._ZL19Msg44_MISSION_COUNThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = _ZL19Msg44_MISSION_COUNThPK17__mavlink_message &rArr; clearMissions(double) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[dc]"></a>_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message</STRONG> (Thumb, 344 bytes, Stack size 424 bytes, mavlinkrcprocess.o(.text._ZL21Msg40_MISSION_REQUESThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = _ZL21Msg40_MISSION_REQUESThPK17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[336]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 1174 bytes, Stack size 424 bytes, mavlinkrcprocess.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[e3]"></a>_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message</STRONG> (Thumb, 536 bytes, Stack size 400 bytes, mavlinkrcprocess.o(.text._ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 4128 + Unknown Stack Size
<LI>Call Chain = _ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message &rArr; addMission(MissionInf, bool, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUploadingMissionsCount()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[e0]"></a>_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message</STRONG> (Thumb, 128 bytes, Stack size 328 bytes, mavlinkrcprocess.o(.text._ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = _ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message &rArr; clearMissions(double) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[d8]"></a>_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message</STRONG> (Thumb, 352 bytes, Stack size 400 bytes, mavlinkrcprocess.o(.text._ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = _ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned*)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[d9]"></a>_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mavlinkrcprocess.o(.text._ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message &rArr; sendParamList() &rArr; ResetParametersIterator() &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendParamList()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[dd]"></a>_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message</STRONG> (Thumb, 400 bytes, Stack size 328 bytes, mavlinkrcprocess.o(.text._ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = _ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMission(unsigned short)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[e1]"></a>_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message</STRONG> (Thumb, 344 bytes, Stack size 424 bytes, mavlinkrcprocess.o(.text._ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = _ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[e2]"></a>_ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mavlinkrcprocess.o(.text._ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message &rArr; SetMsgRate(unsigned char, unsigned short, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, unsigned short, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[de]"></a>_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message</STRONG> (Thumb, 136 bytes, Stack size 336 bytes, mavlinkrcprocess.o(.text._ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = _ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissionsCount()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[325]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, mavlinkrcprocess.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[324]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 1018 bytes, Stack size 224 bytes, mavlinkrcprocess.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[11f]"></a>_GLOBAL__sub_I_Modes.cpp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modes.o(.text._GLOBAL__sub_I_Modes.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_Modes.cpp &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.init_array)
</UL>
<P><STRONG><a name="[ae]"></a>_ZL12Modes_ServerPv</STRONG> (Thumb, 1188 bytes, Stack size 200 bytes, modes.o(.text._ZL12Modes_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184 + Unknown Stack Size
<LI>Call Chain = _ZL12Modes_ServerPv &rArr; process_AuxFuncs(const Receiver*) &rArr; AuxCamTakePhoto() &rArr; get_Attitude_quat(Quaternion*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_process_AuxFuncs()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.text._Z10init_Modesv)
</UL>
<P><STRONG><a name="[ad]"></a>_ZL12MSafe_ServerPv</STRONG> (Thumb, 2728 bytes, Stack size 648 bytes, msafe.o(.text._ZL12MSafe_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = _ZL12MSafe_ServerPv &rArr; Position_Control_Enable(double) &rArr; Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastXYCtrlTime(TIME*, double)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastZCtrlTime(TIME*, double)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nan
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msafe.o(.text._Z10init_MSafev)
</UL>
<P><STRONG><a name="[f5]"></a>_ZL13NavCmd21_LANDdhPdP9NavCmdInf</STRONG> (Thumb, 2616 bytes, Stack size 304 bytes, navcmdprocess.o(.text._ZL13NavCmd21_LANDdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = _ZL13NavCmd21_LANDdhPdP9NavCmdInf &rArr; Attitude_Control_set_Target_Yaw(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[f7]"></a>_ZL14NavCmd93_DELAYdhPdP9NavCmdInf</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, navcmdprocess.o(.text._ZL14NavCmd93_DELAYdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _ZL14NavCmd93_DELAYdhPdP9NavCmdInf &rArr; Position_Control_set_ZLock(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[f6]"></a>_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf</STRONG> (Thumb, 2584 bytes, Stack size 248 bytes, navcmdprocess.o(.text._ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf &rArr; Attitude_Control_set_Target_Yaw(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[f3]"></a>_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf</STRONG> (Thumb, 2640 bytes, Stack size 248 bytes, navcmdprocess.o(.text._ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = _ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf &rArr; Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double) &rArr; Position_Control_set_TargetPositionXYZ(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[f4]"></a>_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf</STRONG> (Thumb, 1376 bytes, Stack size 296 bytes, navcmdprocess.o(.text._ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = _ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf &rArr; Attitude_Control_set_Target_Yaw(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[f8]"></a>_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, inflightcmdprocess.o(.text._ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd &rArr; Position_Control_set_ZAutoSpeed(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYZAutoSpeed(double*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYAutoSpeed(double*, double)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_ZAutoSpeed(double*, double*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
</UL>
<P><STRONG><a name="[f9]"></a>_ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, inflightcmdprocess.o(.text._ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd &rArr; AuxGimbalSetAngle(double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
</UL>
<P><STRONG><a name="[fa]"></a>_ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, inflightcmdprocess.o(.text._ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd))
<BR>[Address Reference Count : 1]<UL><LI> inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
</UL>
<P><STRONG><a name="[120]"></a>_GLOBAL__sub_I_ctrl_Main.cpp</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ctrl_main.o(.text._GLOBAL__sub_I_ctrl_Main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _GLOBAL__sub_I_ctrl_Main.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_main.o(.init_array)
</UL>
<P><STRONG><a name="[c4]"></a>_ZL18ControlSystem_TaskPv</STRONG> (Thumb, 2188 bytes, Stack size 184 bytes, ctrl_main.o(.text._ZL18ControlSystem_TaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = _ZL18ControlSystem_TaskPv &rArr; ctrl_Attitude() &rArr; _ZL22update_output_throttledd &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_MainMotorCount(unsigned char)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_use_IMUAccelerometer()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_use_IMUGyroscope()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_2()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_main.o(.text._Z18init_ControlSystemv)
</UL>
<P><STRONG><a name="[23d]"></a>_ZL22update_output_throttledd</STRONG> (Thumb, 1544 bytes, Stack size 304 bytes, ctrl_attitude.o(.text._ZL22update_output_throttledd))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ZL22update_output_throttledd &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position(vector3&lang;double&rang;*, double)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[247]"></a>_ZL31throttle_nonlinear_compensationPd</STRONG> (Thumb, 1128 bytes, Stack size 88 bytes, ctrl_attitude.o(.text._ZL31throttle_nonlinear_compensationPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZL31throttle_nonlinear_compensationPd &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[355]"></a>_prep_out_transaction</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cdc_device.o(.text._prep_out_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _prep_out_transaction &rArr; usbd_edpt_claim &rArr; osal_mutex_lock &rArr; osal_semaphore_wait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[35b]"></a>tu_bit_test</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cdc_device.o(.text.tu_bit_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_bit_test
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_control_request
</UL>

<P><STRONG><a name="[360]"></a>tu_desc_len</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, cdc_device.o(.text.tu_desc_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_desc_len
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[35e]"></a>tu_desc_next</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cdc_device.o(.text.tu_desc_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_desc_next
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[35f]"></a>tu_desc_type</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, cdc_device.o(.text.tu_desc_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_desc_type
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[35d]"></a>tu_within</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cdc_device.o(.text.tu_within))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tu_within
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[37c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, dcd_synopsys.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_enable
</UL>

<P><STRONG><a name="[359]"></a>bus_reset</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, dcd_synopsys.o(.text.bus_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bus_reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
</UL>

<P><STRONG><a name="[371]"></a>edpt_schedule_packets</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, dcd_synopsys.o(.text.edpt_schedule_packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_min16
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_epout_ints
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_epin_ints
</UL>

<P><STRONG><a name="[36e]"></a>get_speed</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, dcd_synopsys.o(.text.get_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
</UL>

<P><STRONG><a name="[3a0]"></a>handle_epin_ints</STRONG> (Thumb, 454 bytes, Stack size 48 bytes, dcd_synopsys.o(.text.handle_epin_ints))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = handle_epin_ints &rArr; dcd_event_xfer_complete &rArr; dcd_event_handler &rArr; osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_xfer_complete
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fifo_packet
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_min16
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edpt_schedule_packets
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
</UL>

<P><STRONG><a name="[3a2]"></a>handle_epout_ints</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, dcd_synopsys.o(.text.handle_epout_ints))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = handle_epout_ints &rArr; dcd_event_xfer_complete &rArr; dcd_event_handler &rArr; osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_xfer_complete
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_setup_received
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edpt_schedule_packets
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
</UL>

<P><STRONG><a name="[3a3]"></a>handle_rxflvl_ints</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, dcd_synopsys.o(.text.handle_rxflvl_ints))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = handle_rxflvl_ints &rArr; read_fifo_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
</UL>

<P><STRONG><a name="[3a4]"></a>read_fifo_packet</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dcd_synopsys.o(.text.read_fifo_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_fifo_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rxflvl_ints
</UL>

<P><STRONG><a name="[379]"></a>set_speed</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dcd_synopsys.o(.text.set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_init
</UL>

<P><STRONG><a name="[3f3]"></a>set_turnaround</STRONG> (Thumb, 346 bytes, Stack size 12 bytes, dcd_synopsys.o(.text.set_turnaround))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_turnaround
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
</UL>

<P><STRONG><a name="[37e]"></a>tu_edpt_addr</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, dcd_synopsys.o(.text.tu_edpt_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_edpt_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_address
</UL>

<P><STRONG><a name="[36c]"></a>tu_edpt_dir</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, dcd_synopsys.o(.text.tu_edpt_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_edpt_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_clear_stall
</UL>

<P><STRONG><a name="[36b]"></a>tu_edpt_number</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, dcd_synopsys.o(.text.tu_edpt_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_edpt_number
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_clear_stall
</UL>

<P><STRONG><a name="[36f]"></a>tu_max16</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dcd_synopsys.o(.text.tu_max16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_max16
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
</UL>

<P><STRONG><a name="[38a]"></a>tu_min16</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dcd_synopsys.o(.text.tu_min16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_min16
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_epin_ints
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edpt_schedule_packets
</UL>

<P><STRONG><a name="[3a1]"></a>write_fifo_packet</STRONG> (Thumb, 198 bytes, Stack size 36 bytes, dcd_synopsys.o(.text.write_fifo_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = write_fifo_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_epin_ints
</UL>

<P><STRONG><a name="[3d1]"></a>get_driver</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, usbd.o(.text.get_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
</UL>

<P><STRONG><a name="[3a5]"></a>invoke_class_control</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd.o(.text.invoke_class_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = invoke_class_control &rArr; usbd_control_set_complete_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_set_complete_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
</UL>

<P><STRONG><a name="[3a8]"></a>mark_interface_endpoint</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, usbd.o(.text.mark_interface_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mark_interface_endpoint &rArr; tu_desc_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_type
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_next
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_len
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
</UL>

<P><STRONG><a name="[3c3]"></a>osal_mutex_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd.o(.text.osal_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osal_mutex_create &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[3c4]"></a>osal_mutex_lock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd.o(.text.osal_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osal_mutex_lock &rArr; osal_semaphore_wait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_semaphore_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_release
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
</UL>

<P><STRONG><a name="[3c6]"></a>osal_mutex_unlock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd.o(.text.osal_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osal_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_release
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
</UL>

<P><STRONG><a name="[3c7]"></a>osal_queue_create</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usbd.o(.text.osal_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osal_queue_create &rArr; xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[3c8]"></a>osal_queue_receive</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd.o(.text.osal_queue_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osal_queue_receive &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
</UL>

<P><STRONG><a name="[375]"></a>osal_queue_send</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usbd.o(.text.osal_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>

<P><STRONG><a name="[3c5]"></a>osal_semaphore_wait</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usbd.o(.text.osal_semaphore_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osal_semaphore_wait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_lock
</UL>

<P><STRONG><a name="[3cf]"></a>process_control_request</STRONG> (Thumb, 1428 bytes, Stack size 96 bytes, usbd.o(.text.process_control_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = process_control_request &rArr; process_get_descriptor &rArr; tud_control_xfer &rArr; _data_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stalled
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_clear_stall
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_set_request
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_set_complete_callback
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_u16_low
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_number
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_dir
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_class_control
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_driver
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_address
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_status
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
</UL>

<P><STRONG><a name="[3d4]"></a>process_get_descriptor</STRONG> (Thumb, 448 bytes, Stack size 80 bytes, usbd.o(.text.process_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = process_get_descriptor &rArr; tud_control_xfer &rArr; _data_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_string_cb
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_device_cb
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_configuration_cb
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_u16_low
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_u16_high
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
</UL>

<P><STRONG><a name="[3d3]"></a>process_set_config</STRONG> (Thumb, 800 bytes, Stack size 88 bytes, usbd.o(.text.process_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = process_set_config &rArr; mark_interface_endpoint &rArr; tu_desc_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_mount_cb
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_configuration_cb
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_type
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_next
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_interface_endpoint
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
</UL>

<P><STRONG><a name="[3ac]"></a>tu_desc_len</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, usbd.o(.text.tu_desc_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_desc_len
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_interface_endpoint
</UL>

<P><STRONG><a name="[3ad]"></a>tu_desc_next</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd.o(.text.tu_desc_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_desc_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_interface_endpoint
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
</UL>

<P><STRONG><a name="[3a9]"></a>tu_desc_type</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, usbd.o(.text.tu_desc_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_desc_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_interface_endpoint
</UL>

<P><STRONG><a name="[3ab]"></a>tu_edpt_dir</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, usbd.o(.text.tu_edpt_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_edpt_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stalled
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_clear_stall
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_interface_endpoint
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_release
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
</UL>

<P><STRONG><a name="[3aa]"></a>tu_edpt_number</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbd.o(.text.tu_edpt_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_edpt_number
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stalled
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_clear_stall
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_interface_endpoint
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_release
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
</UL>

<P><STRONG><a name="[3d6]"></a>tu_u16_high</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, usbd.o(.text.tu_u16_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_u16_high
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
</UL>

<P><STRONG><a name="[3d0]"></a>tu_u16_low</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, usbd.o(.text.tu_u16_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_u16_low
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_control_request
</UL>

<P><STRONG><a name="[121]"></a>_GLOBAL__sub_I_MS_Attitude.cpp</STRONG> (Thumb, 1160 bytes, Stack size 40 bytes, ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GLOBAL__sub_I_MS_Attitude.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.init_array)
</UL>
<P><STRONG><a name="[209]"></a>_ZL18MS_AttitudeHeadingdPP9PosAccInf</STRONG> (Thumb, 7016 bytes, Stack size 480 bytes, ms_attitude.o(.text._ZL18MS_AttitudeHeadingdPP9PosAccInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = _ZL18MS_AttitudeHeadingdPP9PosAccInf &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[122]"></a>_GLOBAL__sub_I_MS_Position.cpp</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _GLOBAL__sub_I_MS_Position.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_position.o(.init_array)
</UL>
<P><STRONG><a name="[3af]"></a>proc_read10_cmd</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, msc_device.o(.text.proc_read10_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = proc_read10_cmd &rArr; dcd_event_xfer_complete &rArr; dcd_event_handler &rArr; osal_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_xfer_complete
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_set_sense
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_read10_cb
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_min32
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdwr10_get_lba
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdwr10_get_blockcount
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[3b0]"></a>proc_write10_cmd</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, msc_device.o(.text.proc_write10_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = proc_write10_cmd &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_is_writable_cb
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_set_sense
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_min32
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[3b6]"></a>rdwr10_get_blockcount</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, msc_device.o(.text.rdwr10_get_blockcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rdwr10_get_blockcount
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[3b7]"></a>rdwr10_get_lba</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, msc_device.o(.text.rdwr10_get_lba))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rdwr10_get_lba
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[3b1]"></a>tu_bit_test</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, msc_device.o(.text.tu_bit_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_bit_test
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[3ae]"></a>tu_desc_next</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, msc_device.o(.text.tu_desc_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_desc_next
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_open
</UL>

<P><STRONG><a name="[3cd]"></a>tu_min32</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, msc_device.o(.text.tu_min32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tu_min32
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[352]"></a>_data_stage_xact</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usbd_control.o(.text._data_stage_xact))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _data_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_min16
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
</UL>

<P><STRONG><a name="[358]"></a>_status_stage_xact</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usbd_control.o(.text._status_stage_xact))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _status_stage_xact &rArr; dcd_edpt_xfer &rArr; edpt_schedule_packets &rArr; tu_min16
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_status
</UL>

<P><STRONG><a name="[3f7]"></a>tu_edpt_dir</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, usbd_control.o(.text.tu_edpt_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_edpt_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
</UL>

<P><STRONG><a name="[353]"></a>tu_min16</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbd_control.o(.text.tu_min16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_min16
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_data_stage_xact
</UL>

<P><STRONG><a name="[158]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[98]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
